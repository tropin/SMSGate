#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Csharper.OliverTwist.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OliverTwist")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAddressBook(AddressBook instance);
    partial void UpdateAddressBook(AddressBook instance);
    partial void DeleteAddressBook(AddressBook instance);
    partial void InsertAddressGroup(AddressGroup instance);
    partial void UpdateAddressGroup(AddressGroup instance);
    partial void DeleteAddressGroup(AddressGroup instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertDistribution(Distribution instance);
    partial void UpdateDistribution(Distribution instance);
    partial void DeleteDistribution(Distribution instance);
    partial void InsertGroups2Address(Groups2Address instance);
    partial void UpdateGroups2Address(Groups2Address instance);
    partial void DeleteGroups2Address(Groups2Address instance);
    partial void InsertMessageTemplate(MessageTemplate instance);
    partial void UpdateMessageTemplate(MessageTemplate instance);
    partial void DeleteMessageTemplate(MessageTemplate instance);
    partial void InsertSenderName(SenderName instance);
    partial void UpdateSenderName(SenderName instance);
    partial void DeleteSenderName(SenderName instance);
    partial void InsertUsers2Client(Users2Client instance);
    partial void UpdateUsers2Client(Users2Client instance);
    partial void DeleteUsers2Client(Users2Client instance);
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCostRange(CostRange instance);
    partial void UpdateCostRange(CostRange instance);
    partial void DeleteCostRange(CostRange instance);
    partial void InsertAccountOptionHistory(AccountOptionHistory instance);
    partial void UpdateAccountOptionHistory(AccountOptionHistory instance);
    partial void DeleteAccountOptionHistory(AccountOptionHistory instance);
    partial void InsertCostRangesHistory(CostRangesHistory instance);
    partial void UpdateCostRangesHistory(CostRangesHistory instance);
    partial void DeleteCostRangesHistory(CostRangesHistory instance);
    partial void InsertDistributionHistory(DistributionHistory instance);
    partial void UpdateDistributionHistory(DistributionHistory instance);
    partial void DeleteDistributionHistory(DistributionHistory instance);
    partial void InsertAccountHistory(AccountHistory instance);
    partial void UpdateAccountHistory(AccountHistory instance);
    partial void DeleteAccountHistory(AccountHistory instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Insertaspnet_Role(aspnet_Role instance);
    partial void Updateaspnet_Role(aspnet_Role instance);
    partial void Deleteaspnet_Role(aspnet_Role instance);
    partial void InsertClientsHistory(ClientsHistory instance);
    partial void UpdateClientsHistory(ClientsHistory instance);
    partial void DeleteClientsHistory(ClientsHistory instance);
    partial void InsertAccountTemplate(AccountTemplate instance);
    partial void UpdateAccountTemplate(AccountTemplate instance);
    partial void DeleteAccountTemplate(AccountTemplate instance);
    partial void InsertAccountLock(AccountLock instance);
    partial void UpdateAccountLock(AccountLock instance);
    partial void DeleteAccountLock(AccountLock instance);
    #endregion
		
		public DBDataContext() : 
				base(global::Csharper.OliverTwist.Model.Properties.Settings.Default.OliverTwistConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<AddressBook> AddressBooks
		{
			get
			{
				return this.GetTable<AddressBook>();
			}
		}
		
		public System.Data.Linq.Table<AddressGroup> AddressGroups
		{
			get
			{
				return this.GetTable<AddressGroup>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<Distribution> Distributions
		{
			get
			{
				return this.GetTable<Distribution>();
			}
		}
		
		public System.Data.Linq.Table<Groups2Address> Groups2Addresses
		{
			get
			{
				return this.GetTable<Groups2Address>();
			}
		}
		
		public System.Data.Linq.Table<MessageTemplate> MessageTemplates
		{
			get
			{
				return this.GetTable<MessageTemplate>();
			}
		}
		
		public System.Data.Linq.Table<SenderName> SenderNames
		{
			get
			{
				return this.GetTable<SenderName>();
			}
		}
		
		public System.Data.Linq.Table<Users2Client> Users2Clients
		{
			get
			{
				return this.GetTable<Users2Client>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<CostRange> CostRanges
		{
			get
			{
				return this.GetTable<CostRange>();
			}
		}
		
		public System.Data.Linq.Table<AccountOptionHistory> AccountOptionHistories
		{
			get
			{
				return this.GetTable<AccountOptionHistory>();
			}
		}
		
		public System.Data.Linq.Table<CostRangesHistory> CostRangesHistories
		{
			get
			{
				return this.GetTable<CostRangesHistory>();
			}
		}
		
		public System.Data.Linq.Table<DistributionHistory> DistributionHistories
		{
			get
			{
				return this.GetTable<DistributionHistory>();
			}
		}
		
		public System.Data.Linq.Table<AccountHistory> AccountHistories
		{
			get
			{
				return this.GetTable<AccountHistory>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this.GetTable<aspnet_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this.GetTable<aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<ClientsHistory> ClientsHistories
		{
			get
			{
				return this.GetTable<ClientsHistory>();
			}
		}
		
		public System.Data.Linq.Table<AccountTemplate> AccountTemplates
		{
			get
			{
				return this.GetTable<AccountTemplate>();
			}
		}
		
		public System.Data.Linq.Table<AccountLock> AccountLocks
		{
			get
			{
				return this.GetTable<AccountLock>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CreateClient")]
		public ISingleResult<Client> CreateClient(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> userId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OrganizationName", DbType="NVarChar(MAX)")] string organizationName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDealler", DbType="Bit")] System.Nullable<bool> isDealler, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerClientId", DbType="BigInt")] System.Nullable<long> ownerClientId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="InitialAccountAmount", DbType="Decimal(18,0)")] System.Nullable<decimal> initialAccountAmount, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="InitialCost", DbType="Decimal(18,0)")] System.Nullable<decimal> initialCost, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="InitialAccountType", DbType="Int")] System.Nullable<int> initialAccountType, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="InitialAccountDebtingType", DbType="Int")] System.Nullable<int> initialAccountDebtingType, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TemplateAccountId", DbType="BigInt")] System.Nullable<long> templateAccountId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientStatus", DbType="Int")] System.Nullable<int> clientStatus, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="NVarChar(MAX)")] string firstName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="MiddleName", DbType="NVarChar(MAX)")] string middleName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="NVarChar(MAX)")] string lastName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="City", DbType="NVarChar(MAX)")] string city, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="MobilePhone", DbType="NVarChar(MAX)")] string mobilePhone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeZone", DbType="NVarChar(MAX)")] string timeZone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Sex", DbType="Int")] System.Nullable<int> sex)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, organizationName, isDealler, ownerClientId, initialAccountAmount, initialCost, initialAccountType, initialAccountDebtingType, templateAccountId, clientStatus, firstName, middleName, lastName, city, mobilePhone, timeZone, sex);
			return ((ISingleResult<Client>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ChangeClientAccount")]
		public int ChangeClientAccount([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountId", DbType="BigInt")] System.Nullable<long> accountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Amount", DbType="Decimal(18,0)")] System.Nullable<decimal> amount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cost", DbType="Decimal(18,0)")] System.Nullable<decimal> cost, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MoneyVolume", DbType="Decimal(18,0)")] System.Nullable<decimal> moneyVolume, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SelectedRangeId", DbType="BigInt")] System.Nullable<long> selectedRangeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="NVarChar(MAX)")] string comment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ManagerId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> managerId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RealClientId", DbType="BigInt")] System.Nullable<long> realClientId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OperationalClientId", DbType="BigInt")] System.Nullable<long> operationalClientId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountId, amount, cost, moneyVolume, selectedRangeId, comment, managerId, realClientId, operationalClientId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetClearBallance", IsComposable=true)]
		public System.Nullable<decimal> GetClearBallance([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientId", DbType="BigInt")] System.Nullable<long> clientId)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientId).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetOverDraftBallance", IsComposable=true)]
		public System.Nullable<decimal> GetOverDraftBallance([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientId", DbType="BigInt")] System.Nullable<long> clientId)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientId).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteUserInternal")]
		public int DeleteUserInternal([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetUndercontrolClients", IsComposable=true)]
		public IQueryable<GetUnderControlClientsResult> GetUnderControlClients([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RootClient", DbType="BigInt")] System.Nullable<long> rootClient)
		{
			return this.CreateMethodCallQuery<GetUnderControlClientsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rootClient);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LockSMS")]
		public ISingleResult<LockSMSResult> LockSMS([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientId", DbType="BigInt")] System.Nullable<long> clientId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Count", DbType="BigInt")] System.Nullable<long> count, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DistributionId", DbType="BigInt")] System.Nullable<long> distributionId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExtDistributionId", DbType="NVarChar(300)")] string extDistributionId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientId, count, distributionId, extDistributionId);
			return ((ISingleResult<LockSMSResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FinalizeSMSLock")]
		public int FinalizeSMSLock([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientId", DbType="BigInt")] System.Nullable<long> clientId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Count", DbType="BigInt")] System.Nullable<long> count, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DistributionId", DbType="BigInt")] System.Nullable<long> distributionId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExtDistributionId", DbType="NVarChar(300)")] string extDistributionId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsCommit", DbType="Bit")] System.Nullable<bool> isCommit)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientId, count, distributionId, extDistributionId, isCommit);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private decimal _Amount;
		
		private global::Csharper.OliverTwist.Model.AccountType _AccountType;
		
		private global::Csharper.OliverTwist.Model.DebtingType _DebtingType;
		
		private bool _IsDeleted;
		
		private EntityRef<Client> _HolderClient;
		
		private EntitySet<CostRange> _CostRanges;
		
		private EntitySet<AccountOptionHistory> _AccountOptionHistories;
		
		private EntitySet<CostRangesHistory> _CostRangesHistories;
		
		private EntitySet<AccountHistory> _AccountHistories;
		
		private EntityRef<AccountTemplate> _Template;
		
		private EntitySet<AccountLock> _AccountLocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnAccountTypeChanging(global::Csharper.OliverTwist.Model.AccountType value);
    partial void OnAccountTypeChanged();
    partial void OnDebtingTypeChanging(global::Csharper.OliverTwist.Model.DebtingType value);
    partial void OnDebtingTypeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Account()
		{
			this._HolderClient = default(EntityRef<Client>);
			this._CostRanges = new EntitySet<CostRange>(new Action<CostRange>(this.attach_CostRanges), new Action<CostRange>(this.detach_CostRanges));
			this._AccountOptionHistories = new EntitySet<AccountOptionHistory>(new Action<AccountOptionHistory>(this.attach_AccountOptionHistories), new Action<AccountOptionHistory>(this.detach_AccountOptionHistories));
			this._CostRangesHistories = new EntitySet<CostRangesHistory>(new Action<CostRangesHistory>(this.attach_CostRangesHistories), new Action<CostRangesHistory>(this.detach_CostRangesHistories));
			this._AccountHistories = new EntitySet<AccountHistory>(new Action<AccountHistory>(this.attach_AccountHistories), new Action<AccountHistory>(this.detach_AccountHistories));
			this._Template = default(EntityRef<AccountTemplate>);
			this._AccountLocks = new EntitySet<AccountLock>(new Action<AccountLock>(this.attach_AccountLocks), new Action<AccountLock>(this.detach_AccountLocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,0) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountType", DbType="Int NOT NULL", CanBeNull=false)]
		public global::Csharper.OliverTwist.Model.AccountType AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebtingType", DbType="Int NOT NULL", CanBeNull=false)]
		public global::Csharper.OliverTwist.Model.DebtingType DebtingType
		{
			get
			{
				return this._DebtingType;
			}
			set
			{
				if ((this._DebtingType != value))
				{
					this.OnDebtingTypeChanging(value);
					this.SendPropertyChanging();
					this._DebtingType = value;
					this.SendPropertyChanged("DebtingType");
					this.OnDebtingTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Client", Storage="_HolderClient", ThisKey="Id", OtherKey="AccountId", IsUnique=true, IsForeignKey=false)]
		public Client HolderClient
		{
			get
			{
				return this._HolderClient.Entity;
			}
			set
			{
				Client previousValue = this._HolderClient.Entity;
				if (((previousValue != value) 
							|| (this._HolderClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HolderClient.Entity = null;
						previousValue.Account = null;
					}
					this._HolderClient.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("HolderClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_CostRange", Storage="_CostRanges", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<CostRange> CostRanges
		{
			get
			{
				return this._CostRanges;
			}
			set
			{
				this._CostRanges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountOptionHistory", Storage="_AccountOptionHistories", ThisKey="Id", OtherKey="Id")]
		public EntitySet<AccountOptionHistory> AccountOptionHistories
		{
			get
			{
				return this._AccountOptionHistories;
			}
			set
			{
				this._AccountOptionHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_CostRangesHistory", Storage="_CostRangesHistories", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<CostRangesHistory> CostRangesHistories
		{
			get
			{
				return this._CostRangesHistories;
			}
			set
			{
				this._CostRangesHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountHistory", Storage="_AccountHistories", ThisKey="Id", OtherKey="Id")]
		public EntitySet<AccountHistory> AccountHistories
		{
			get
			{
				return this._AccountHistories;
			}
			set
			{
				this._AccountHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountTemplate", Storage="_Template", ThisKey="Id", OtherKey="AccountId", IsUnique=true, IsForeignKey=false)]
		public AccountTemplate Template
		{
			get
			{
				return this._Template.Entity;
			}
			set
			{
				AccountTemplate previousValue = this._Template.Entity;
				if (((previousValue != value) 
							|| (this._Template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Template.Entity = null;
						previousValue.Account = null;
					}
					this._Template.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("Template");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountLock", Storage="_AccountLocks", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<AccountLock> AccountLocks
		{
			get
			{
				return this._AccountLocks;
			}
			set
			{
				this._AccountLocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CostRanges(CostRange entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_CostRanges(CostRange entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_AccountOptionHistories(AccountOptionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountOptionHistories(AccountOptionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_CostRangesHistories(CostRangesHistory entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_CostRangesHistories(CostRangesHistory entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_AccountHistories(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountHistories(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_AccountLocks(AccountLock entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountLocks(AccountLock entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressBook")]
	public partial class AddressBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ClientId;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private global::Csharper.OliverTwist.Model.Sex? _Sex;
		
		private System.Nullable<System.DateTime> _BirthDay;
		
		private string _MobilePhone;
		
		private string _City;
		
		private string _Description;
		
		private string _TimeZone;
		
		private bool _IsDeleted;
		
		private EntitySet<Groups2Address> _Assigments;
		
		private EntityRef<Client> _OwnerClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnClientIdChanging(long value);
    partial void OnClientIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSexChanging(global::Csharper.OliverTwist.Model.Sex? value);
    partial void OnSexChanged();
    partial void OnBirthDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDayChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeZoneChanging(string value);
    partial void OnTimeZoneChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public AddressBook()
		{
			this._Assigments = new EntitySet<Groups2Address>(new Action<Groups2Address>(this.attach_Assigments), new Action<Groups2Address>(this.detach_Assigments));
			this._OwnerClient = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="BigInt NOT NULL")]
		public long ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._OwnerClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(4000)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(4000)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(4000)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Int", CanBeNull=true)]
		public global::Csharper.OliverTwist.Model.Sex? Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDay
		{
			get
			{
				return this._BirthDay;
			}
			set
			{
				if ((this._BirthDay != value))
				{
					this.OnBirthDayChanging(value);
					this.SendPropertyChanging();
					this._BirthDay = value;
					this.SendPropertyChanged("BirthDay");
					this.OnBirthDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(2000)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZone", DbType="NVarChar(4000)")]
		public string TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressBook_Groups2Address", Storage="_Assigments", ThisKey="Id", OtherKey="AddressId")]
		public EntitySet<Groups2Address> Assigments
		{
			get
			{
				return this._Assigments;
			}
			set
			{
				this._Assigments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AddressBook", Storage="_OwnerClient", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public Client OwnerClient
		{
			get
			{
				return this._OwnerClient.Entity;
			}
			set
			{
				Client previousValue = this._OwnerClient.Entity;
				if (((previousValue != value) 
							|| (this._OwnerClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerClient.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._OwnerClient.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(long);
					}
					this.SendPropertyChanged("OwnerClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assigments(Groups2Address entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Assigments(Groups2Address entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressGroups")]
	public partial class AddressGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private long _ClientId;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private bool _IsDeleted;
		
		private EntitySet<Groups2Address> _Assigments;
		
		private EntitySet<Groups2Address> _MasterAssigments;
		
		private EntityRef<Client> _OwnerClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClientIdChanging(long value);
    partial void OnClientIdChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public AddressGroup()
		{
			this._Assigments = new EntitySet<Groups2Address>(new Action<Groups2Address>(this.attach_Assigments), new Action<Groups2Address>(this.detach_Assigments));
			this._MasterAssigments = new EntitySet<Groups2Address>(new Action<Groups2Address>(this.attach_MasterAssigments), new Action<Groups2Address>(this.detach_MasterAssigments));
			this._OwnerClient = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="BigInt NOT NULL")]
		public long ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._OwnerClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressGroup_Groups2Address", Storage="_Assigments", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Groups2Address> Assigments
		{
			get
			{
				return this._Assigments;
			}
			set
			{
				this._Assigments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressGroup_Groups2Address1", Storage="_MasterAssigments", ThisKey="Id", OtherKey="SlaveGroupId")]
		public EntitySet<Groups2Address> MasterAssigments
		{
			get
			{
				return this._MasterAssigments;
			}
			set
			{
				this._MasterAssigments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AddressGroup", Storage="_OwnerClient", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Client OwnerClient
		{
			get
			{
				return this._OwnerClient.Entity;
			}
			set
			{
				Client previousValue = this._OwnerClient.Entity;
				if (((previousValue != value) 
							|| (this._OwnerClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerClient.Entity = null;
						previousValue.AddressGroups.Remove(this);
					}
					this._OwnerClient.Entity = value;
					if ((value != null))
					{
						value.AddressGroups.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(long);
					}
					this.SendPropertyChanged("OwnerClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assigments(Groups2Address entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Assigments(Groups2Address entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_MasterAssigments(Groups2Address entity)
		{
			this.SendPropertyChanging();
			entity.SlaveGroup = this;
		}
		
		private void detach_MasterAssigments(Groups2Address entity)
		{
			this.SendPropertyChanging();
			entity.SlaveGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<SenderName> _ApprovedSenderNames;
		
		private EntityRef<Users2Client> _ClientAssigments;
		
		private EntityRef<aspnet_Membership> _Membership;
		
		private EntitySet<AccountOptionHistory> _AccountOptionHistories;
		
		private EntitySet<CostRangesHistory> _CostRangesHistories;
		
		private EntitySet<DistributionHistory> _DistributionHistories;
		
		private EntitySet<AccountHistory> _AccountHistories;
		
		private EntityRef<UserProfile> _UserProfiles;
		
		private EntitySet<aspnet_UsersInRole> _RoleAssigments;
		
		private EntitySet<ClientsHistory> _ClientsHistoryAsManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._ApprovedSenderNames = new EntitySet<SenderName>(new Action<SenderName>(this.attach_ApprovedSenderNames), new Action<SenderName>(this.detach_ApprovedSenderNames));
			this._ClientAssigments = default(EntityRef<Users2Client>);
			this._Membership = default(EntityRef<aspnet_Membership>);
			this._AccountOptionHistories = new EntitySet<AccountOptionHistory>(new Action<AccountOptionHistory>(this.attach_AccountOptionHistories), new Action<AccountOptionHistory>(this.detach_AccountOptionHistories));
			this._CostRangesHistories = new EntitySet<CostRangesHistory>(new Action<CostRangesHistory>(this.attach_CostRangesHistories), new Action<CostRangesHistory>(this.detach_CostRangesHistories));
			this._DistributionHistories = new EntitySet<DistributionHistory>(new Action<DistributionHistory>(this.attach_DistributionHistories), new Action<DistributionHistory>(this.detach_DistributionHistories));
			this._AccountHistories = new EntitySet<AccountHistory>(new Action<AccountHistory>(this.attach_AccountHistories), new Action<AccountHistory>(this.detach_AccountHistories));
			this._UserProfiles = default(EntityRef<UserProfile>);
			this._RoleAssigments = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_RoleAssigments), new Action<aspnet_UsersInRole>(this.detach_RoleAssigments));
			this._ClientsHistoryAsManager = new EntitySet<ClientsHistory>(new Action<ClientsHistory>(this.attach_ClientsHistoryAsManager), new Action<ClientsHistory>(this.detach_ClientsHistoryAsManager));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_SenderName", Storage="_ApprovedSenderNames", ThisKey="UserId", OtherKey="ApproveManagerId")]
		public EntitySet<SenderName> ApprovedSenderNames
		{
			get
			{
				return this._ApprovedSenderNames;
			}
			set
			{
				this._ApprovedSenderNames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Users2Client", Storage="_ClientAssigments", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public Users2Client ClientAssigments
		{
			get
			{
				return this._ClientAssigments.Entity;
			}
			set
			{
				Users2Client previousValue = this._ClientAssigments.Entity;
				if (((previousValue != value) 
							|| (this._ClientAssigments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientAssigments.Entity = null;
						previousValue.User = null;
					}
					this._ClientAssigments.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("ClientAssigments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Membership Membership
		{
			get
			{
				return this._Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._Membership.Entity;
				if (((previousValue != value) 
							|| (this._Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membership.Entity = null;
						previousValue.User = null;
					}
					this._Membership.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Membership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_AccountOptionHistory", Storage="_AccountOptionHistories", ThisKey="UserId", OtherKey="ManagerId")]
		public EntitySet<AccountOptionHistory> AccountOptionHistories
		{
			get
			{
				return this._AccountOptionHistories;
			}
			set
			{
				this._AccountOptionHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_CostRangesHistory", Storage="_CostRangesHistories", ThisKey="UserId", OtherKey="ManagerId")]
		public EntitySet<CostRangesHistory> CostRangesHistories
		{
			get
			{
				return this._CostRangesHistories;
			}
			set
			{
				this._CostRangesHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DistributionHistory", Storage="_DistributionHistories", ThisKey="UserId", OtherKey="ManagerId")]
		public EntitySet<DistributionHistory> DistributionHistories
		{
			get
			{
				return this._DistributionHistories;
			}
			set
			{
				this._DistributionHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_AccountHistory", Storage="_AccountHistories", ThisKey="UserId", OtherKey="ManagerId")]
		public EntitySet<AccountHistory> AccountHistories
		{
			get
			{
				return this._AccountHistories;
			}
			set
			{
				this._AccountHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserProfile", Storage="_UserProfiles", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public UserProfile Profile
		{
			get
			{
				return this._UserProfiles.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfiles.Entity;
				if (((previousValue != value) 
							|| (this._UserProfiles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfiles.Entity = null;
						previousValue.User = null;
					}
					this._UserProfiles.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_RoleAssigments", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_UsersInRole> RoleAssigments
		{
			get
			{
				return this._RoleAssigments;
			}
			set
			{
				this._RoleAssigments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_ClientsHistory", Storage="_ClientsHistoryAsManager", ThisKey="UserId", OtherKey="ManagerId")]
		public EntitySet<ClientsHistory> ClientsHistoryAsManager
		{
			get
			{
				return this._ClientsHistoryAsManager;
			}
			set
			{
				this._ClientsHistoryAsManager.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApprovedSenderNames(SenderName entity)
		{
			this.SendPropertyChanging();
			entity.ApprovedBy = this;
		}
		
		private void detach_ApprovedSenderNames(SenderName entity)
		{
			this.SendPropertyChanging();
			entity.ApprovedBy = null;
		}
		
		private void attach_AccountOptionHistories(AccountOptionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionUser = this;
		}
		
		private void detach_AccountOptionHistories(AccountOptionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionUser = null;
		}
		
		private void attach_CostRangesHistories(CostRangesHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionUser = this;
		}
		
		private void detach_CostRangesHistories(CostRangesHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionUser = null;
		}
		
		private void attach_DistributionHistories(DistributionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionUser = this;
		}
		
		private void detach_DistributionHistories(DistributionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionUser = null;
		}
		
		private void attach_AccountHistories(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionUser = this;
		}
		
		private void detach_AccountHistories(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionUser = null;
		}
		
		private void attach_RoleAssigments(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RoleAssigments(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ClientsHistoryAsManager(ClientsHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionManager = this;
		}
		
		private void detach_ClientsHistoryAsManager(ClientsHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionManager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Distributions")]
	public partial class Distribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Recipients;
		
		private int _Type;
		
		private string _STOPList;
		
		private long _SenderNameId;
		
		private System.Nullable<System.DateTime> _SmsTTL;
		
		private string _Text;
		
		private System.Nullable<long> _TemplateId;
		
		private System.Nullable<bool> _Transliterate;
		
		private long _CreatedByClientId;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private string _Name;
		
		private global::Csharper.OliverTwist.Model.DistributionStatus _Status;
		
		private bool _IsDeleted;
		
		private EntitySet<DistributionHistory> _DistributionHistories;
		
		private EntitySet<AccountHistory> _DebtingHistory;
		
		private EntitySet<AccountLock> _AccountLocks;
		
		private EntityRef<MessageTemplate> _MessageTemplate;
		
		private EntityRef<SenderName> _SenderName;
		
		private EntityRef<Client> _OwnerClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnRecipientsChanging(string value);
    partial void OnRecipientsChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnSTOPListChanging(string value);
    partial void OnSTOPListChanged();
    partial void OnSenderNameIdChanging(long value);
    partial void OnSenderNameIdChanged();
    partial void OnSmsTTLChanging(System.Nullable<System.DateTime> value);
    partial void OnSmsTTLChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTemplateIdChanging(System.Nullable<long> value);
    partial void OnTemplateIdChanged();
    partial void OnTransliterateChanging(System.Nullable<bool> value);
    partial void OnTransliterateChanged();
    partial void OnCreatedByClientIdChanging(long value);
    partial void OnCreatedByClientIdChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(global::Csharper.OliverTwist.Model.DistributionStatus value);
    partial void OnStatusChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Distribution()
		{
			this._DistributionHistories = new EntitySet<DistributionHistory>(new Action<DistributionHistory>(this.attach_DistributionHistories), new Action<DistributionHistory>(this.detach_DistributionHistories));
			this._DebtingHistory = new EntitySet<AccountHistory>(new Action<AccountHistory>(this.attach_DebtingHistory), new Action<AccountHistory>(this.detach_DebtingHistory));
			this._AccountLocks = new EntitySet<AccountLock>(new Action<AccountLock>(this.attach_AccountLocks), new Action<AccountLock>(this.detach_AccountLocks));
			this._MessageTemplate = default(EntityRef<MessageTemplate>);
			this._SenderName = default(EntityRef<SenderName>);
			this._OwnerClient = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recipients", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Recipients
		{
			get
			{
				return this._Recipients;
			}
			set
			{
				if ((this._Recipients != value))
				{
					this.OnRecipientsChanging(value);
					this.SendPropertyChanging();
					this._Recipients = value;
					this.SendPropertyChanged("Recipients");
					this.OnRecipientsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STOPList", DbType="NVarChar(MAX)")]
		public string STOPList
		{
			get
			{
				return this._STOPList;
			}
			set
			{
				if ((this._STOPList != value))
				{
					this.OnSTOPListChanging(value);
					this.SendPropertyChanging();
					this._STOPList = value;
					this.SendPropertyChanged("STOPList");
					this.OnSTOPListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderNameId", DbType="BigInt NOT NULL")]
		public long SenderNameId
		{
			get
			{
				return this._SenderNameId;
			}
			set
			{
				if ((this._SenderNameId != value))
				{
					if (this._SenderName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderNameIdChanging(value);
					this.SendPropertyChanging();
					this._SenderNameId = value;
					this.SendPropertyChanged("SenderNameId");
					this.OnSenderNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmsTTL", DbType="DateTime")]
		public System.Nullable<System.DateTime> SmsTTL
		{
			get
			{
				return this._SmsTTL;
			}
			set
			{
				if ((this._SmsTTL != value))
				{
					this.OnSmsTTLChanging(value);
					this.SendPropertyChanging();
					this._SmsTTL = value;
					this.SendPropertyChanged("SmsTTL");
					this.OnSmsTTLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateId", DbType="BigInt")]
		public System.Nullable<long> TemplateId
		{
			get
			{
				return this._TemplateId;
			}
			set
			{
				if ((this._TemplateId != value))
				{
					if (this._MessageTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateId = value;
					this.SendPropertyChanged("TemplateId");
					this.OnTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transliterate", DbType="Bit")]
		public System.Nullable<bool> Transliterate
		{
			get
			{
				return this._Transliterate;
			}
			set
			{
				if ((this._Transliterate != value))
				{
					this.OnTransliterateChanging(value);
					this.SendPropertyChanging();
					this._Transliterate = value;
					this.SendPropertyChanged("Transliterate");
					this.OnTransliterateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByClientId", DbType="BigInt NOT NULL")]
		public long CreatedByClientId
		{
			get
			{
				return this._CreatedByClientId;
			}
			set
			{
				if ((this._CreatedByClientId != value))
				{
					if (this._OwnerClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByClientIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByClientId = value;
					this.SendPropertyChanged("CreatedByClientId");
					this.OnCreatedByClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL", CanBeNull=false)]
		public global::Csharper.OliverTwist.Model.DistributionStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Distribution_DistributionHistory", Storage="_DistributionHistories", ThisKey="Id", OtherKey="Id")]
		public EntitySet<DistributionHistory> DistributionHistories
		{
			get
			{
				return this._DistributionHistories;
			}
			set
			{
				this._DistributionHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Distribution_AccountHistory", Storage="_DebtingHistory", ThisKey="Id", OtherKey="DistributionId")]
		public EntitySet<AccountHistory> DebtingHistory
		{
			get
			{
				return this._DebtingHistory;
			}
			set
			{
				this._DebtingHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Distribution_AccountLock", Storage="_AccountLocks", ThisKey="Id", OtherKey="DistributionId")]
		public EntitySet<AccountLock> AccountLocks
		{
			get
			{
				return this._AccountLocks;
			}
			set
			{
				this._AccountLocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageTemplate_Distribution", Storage="_MessageTemplate", ThisKey="TemplateId", OtherKey="Id", IsForeignKey=true)]
		public MessageTemplate MessageTemplate
		{
			get
			{
				return this._MessageTemplate.Entity;
			}
			set
			{
				MessageTemplate previousValue = this._MessageTemplate.Entity;
				if (((previousValue != value) 
							|| (this._MessageTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageTemplate.Entity = null;
						previousValue.Distributions.Remove(this);
					}
					this._MessageTemplate.Entity = value;
					if ((value != null))
					{
						value.Distributions.Add(this);
						this._TemplateId = value.Id;
					}
					else
					{
						this._TemplateId = default(Nullable<long>);
					}
					this.SendPropertyChanged("MessageTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SenderName_Distribution", Storage="_SenderName", ThisKey="SenderNameId", OtherKey="Id", IsForeignKey=true)]
		public SenderName SenderName
		{
			get
			{
				return this._SenderName.Entity;
			}
			set
			{
				SenderName previousValue = this._SenderName.Entity;
				if (((previousValue != value) 
							|| (this._SenderName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SenderName.Entity = null;
						previousValue.Distributions.Remove(this);
					}
					this._SenderName.Entity = value;
					if ((value != null))
					{
						value.Distributions.Add(this);
						this._SenderNameId = value.Id;
					}
					else
					{
						this._SenderNameId = default(long);
					}
					this.SendPropertyChanged("SenderName");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Distribution", Storage="_OwnerClient", ThisKey="CreatedByClientId", OtherKey="Id", IsForeignKey=true)]
		public Client OwnerClient
		{
			get
			{
				return this._OwnerClient.Entity;
			}
			set
			{
				Client previousValue = this._OwnerClient.Entity;
				if (((previousValue != value) 
							|| (this._OwnerClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerClient.Entity = null;
						previousValue.Distributions.Remove(this);
					}
					this._OwnerClient.Entity = value;
					if ((value != null))
					{
						value.Distributions.Add(this);
						this._CreatedByClientId = value.Id;
					}
					else
					{
						this._CreatedByClientId = default(long);
					}
					this.SendPropertyChanged("OwnerClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DistributionHistories(DistributionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Distribution = this;
		}
		
		private void detach_DistributionHistories(DistributionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Distribution = null;
		}
		
		private void attach_DebtingHistory(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.Distribution = this;
		}
		
		private void detach_DebtingHistory(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.Distribution = null;
		}
		
		private void attach_AccountLocks(AccountLock entity)
		{
			this.SendPropertyChanging();
			entity.Distribution = this;
		}
		
		private void detach_AccountLocks(AccountLock entity)
		{
			this.SendPropertyChanging();
			entity.Distribution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups2Addresses")]
	public partial class Groups2Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _AddressId;
		
		private long _GroupId;
		
		private System.Nullable<long> _SlaveGroupId;
		
		private System.Nullable<int> _GroupType;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private bool _IsDeleted;
		
		private EntityRef<AddressGroup> _Group;
		
		private EntityRef<AddressBook> _Address;
		
		private EntityRef<AddressGroup> _SlaveGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAddressIdChanging(System.Nullable<long> value);
    partial void OnAddressIdChanged();
    partial void OnGroupIdChanging(long value);
    partial void OnGroupIdChanged();
    partial void OnSlaveGroupIdChanging(System.Nullable<long> value);
    partial void OnSlaveGroupIdChanged();
    partial void OnGroupTypeChanging(System.Nullable<int> value);
    partial void OnGroupTypeChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Groups2Address()
		{
			this._Group = default(EntityRef<AddressGroup>);
			this._Address = default(EntityRef<AddressBook>);
			this._SlaveGroup = default(EntityRef<AddressGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="BigInt")]
		public System.Nullable<long> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="BigInt NOT NULL")]
		public long GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlaveGroupId", DbType="BigInt")]
		public System.Nullable<long> SlaveGroupId
		{
			get
			{
				return this._SlaveGroupId;
			}
			set
			{
				if ((this._SlaveGroupId != value))
				{
					if (this._SlaveGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSlaveGroupIdChanging(value);
					this.SendPropertyChanging();
					this._SlaveGroupId = value;
					this.SendPropertyChanged("SlaveGroupId");
					this.OnSlaveGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupType", DbType="Int")]
		public System.Nullable<int> GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this.OnGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._GroupType = value;
					this.SendPropertyChanged("GroupType");
					this.OnGroupTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressGroup_Groups2Address", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public AddressGroup Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				AddressGroup previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Assigments.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Assigments.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(long);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressBook_Groups2Address", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
		public AddressBook Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				AddressBook previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Assigments.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Assigments.Add(this);
						this._AddressId = value.Id;
					}
					else
					{
						this._AddressId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressGroup_Groups2Address1", Storage="_SlaveGroup", ThisKey="SlaveGroupId", OtherKey="Id", IsForeignKey=true)]
		public AddressGroup SlaveGroup
		{
			get
			{
				return this._SlaveGroup.Entity;
			}
			set
			{
				AddressGroup previousValue = this._SlaveGroup.Entity;
				if (((previousValue != value) 
							|| (this._SlaveGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SlaveGroup.Entity = null;
						previousValue.MasterAssigments.Remove(this);
					}
					this._SlaveGroup.Entity = value;
					if ((value != null))
					{
						value.MasterAssigments.Add(this);
						this._SlaveGroupId = value.Id;
					}
					else
					{
						this._SlaveGroupId = default(Nullable<long>);
					}
					this.SendPropertyChanged("SlaveGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageTemplates")]
	public partial class MessageTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ClientId;
		
		private string _Name;
		
		private string _Text;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private bool _IsDeleted;
		
		private EntitySet<Distribution> _Distributions;
		
		private EntityRef<Client> _OwnerClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnClientIdChanging(long value);
    partial void OnClientIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public MessageTemplate()
		{
			this._Distributions = new EntitySet<Distribution>(new Action<Distribution>(this.attach_Distributions), new Action<Distribution>(this.detach_Distributions));
			this._OwnerClient = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="BigInt NOT NULL")]
		public long ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._OwnerClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageTemplate_Distribution", Storage="_Distributions", ThisKey="Id", OtherKey="TemplateId")]
		public EntitySet<Distribution> Distributions
		{
			get
			{
				return this._Distributions;
			}
			set
			{
				this._Distributions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_MessageTemplate", Storage="_OwnerClient", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Client OwnerClient
		{
			get
			{
				return this._OwnerClient.Entity;
			}
			set
			{
				Client previousValue = this._OwnerClient.Entity;
				if (((previousValue != value) 
							|| (this._OwnerClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerClient.Entity = null;
						previousValue.MessageTemplates.Remove(this);
					}
					this._OwnerClient.Entity = value;
					if ((value != null))
					{
						value.MessageTemplates.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(long);
					}
					this.SendPropertyChanged("OwnerClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Distributions(Distribution entity)
		{
			this.SendPropertyChanging();
			entity.MessageTemplate = this;
		}
		
		private void detach_Distributions(Distribution entity)
		{
			this.SendPropertyChanging();
			entity.MessageTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SenderNames")]
	public partial class SenderName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ClientId;
		
		private System.Nullable<System.DateTime> _ApproveDate;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.Guid> _ApproveManagerId;
		
		private bool _IsDeleted;
		
		private EntitySet<Distribution> _Distributions;
		
		private EntityRef<aspnet_User> _ApprovedBy;
		
		private EntityRef<Client> _OwnerClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnClientIdChanging(long value);
    partial void OnClientIdChanged();
    partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApproveDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnApproveManagerIdChanging(System.Nullable<System.Guid> value);
    partial void OnApproveManagerIdChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public SenderName()
		{
			this._Distributions = new EntitySet<Distribution>(new Action<Distribution>(this.attach_Distributions), new Action<Distribution>(this.detach_Distributions));
			this._ApprovedBy = default(EntityRef<aspnet_User>);
			this._OwnerClient = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="BigInt NOT NULL")]
		public long ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._OwnerClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApproveDate
		{
			get
			{
				return this._ApproveDate;
			}
			set
			{
				if ((this._ApproveDate != value))
				{
					this.OnApproveDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveDate = value;
					this.SendPropertyChanged("ApproveDate");
					this.OnApproveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveManagerId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ApproveManagerId
		{
			get
			{
				return this._ApproveManagerId;
			}
			set
			{
				if ((this._ApproveManagerId != value))
				{
					if (this._ApprovedBy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproveManagerIdChanging(value);
					this.SendPropertyChanging();
					this._ApproveManagerId = value;
					this.SendPropertyChanged("ApproveManagerId");
					this.OnApproveManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SenderName_Distribution", Storage="_Distributions", ThisKey="Id", OtherKey="SenderNameId")]
		public EntitySet<Distribution> Distributions
		{
			get
			{
				return this._Distributions;
			}
			set
			{
				this._Distributions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_SenderName", Storage="_ApprovedBy", ThisKey="ApproveManagerId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User ApprovedBy
		{
			get
			{
				return this._ApprovedBy.Entity;
			}
			set
			{
				aspnet_User previousValue = this._ApprovedBy.Entity;
				if (((previousValue != value) 
							|| (this._ApprovedBy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApprovedBy.Entity = null;
						previousValue.ApprovedSenderNames.Remove(this);
					}
					this._ApprovedBy.Entity = value;
					if ((value != null))
					{
						value.ApprovedSenderNames.Add(this);
						this._ApproveManagerId = value.UserId;
					}
					else
					{
						this._ApproveManagerId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ApprovedBy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_SenderName", Storage="_OwnerClient", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Client OwnerClient
		{
			get
			{
				return this._OwnerClient.Entity;
			}
			set
			{
				Client previousValue = this._OwnerClient.Entity;
				if (((previousValue != value) 
							|| (this._OwnerClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerClient.Entity = null;
						previousValue.SenderNames.Remove(this);
					}
					this._OwnerClient.Entity = value;
					if ((value != null))
					{
						value.SenderNames.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(long);
					}
					this.SendPropertyChanged("OwnerClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Distributions(Distribution entity)
		{
			this.SendPropertyChanging();
			entity.SenderName = this;
		}
		
		private void detach_Distributions(Distribution entity)
		{
			this.SendPropertyChanging();
			entity.SenderName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users2Clients")]
	public partial class Users2Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<long> _ClientId;
		
		private bool _IsDeleted;
		
		private EntityRef<aspnet_User> _User;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnClientIdChanging(System.Nullable<long> value);
    partial void OnClientIdChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Users2Client()
		{
			this._User = default(EntityRef<aspnet_User>);
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="BigInt")]
		public System.Nullable<long> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Users2Client", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ClientAssigments = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ClientAssigments = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Users2Client", Storage="_Client", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.UserAssigments.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.UserAssigments.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Membership")]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntityRef<aspnet_User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this._User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Membership = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _OrganizationName;
		
		private global::Csharper.OliverTwist.Model.ClientStatus? _Status;
		
		private System.Nullable<long> _DeallerOfClientId;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<long> _CreatedByClientId;
		
		private System.Nullable<long> _AccountId;
		
		private bool _IsDeleted;
		
		private EntitySet<AddressBook> _Addresses;
		
		private EntitySet<AddressGroup> _AddressGroups;
		
		private EntitySet<Distribution> _Distributions;
		
		private EntitySet<MessageTemplate> _MessageTemplates;
		
		private EntitySet<SenderName> _SenderNames;
		
		private EntitySet<Users2Client> _UserAssigments;
		
		private EntitySet<Client> _OwnedClients;
		
		private EntitySet<Client> _Deallers;
		
		private EntitySet<AccountOptionHistory> _AccountOptionHistoriesAsOperational;
		
		private EntitySet<AccountOptionHistory> _AccountOptionHistoriesAsReal;
		
		private EntitySet<CostRangesHistory> _CostRangesHistoriesAsOperational;
		
		private EntitySet<CostRangesHistory> _CostRangesHistoryAsReal;
		
		private EntitySet<DistributionHistory> _DistributionHistoriesAsOperational;
		
		private EntitySet<DistributionHistory> _DistributionHistoriesAsReal;
		
		private EntitySet<AccountHistory> _AccountHistoriesAsOperational;
		
		private EntitySet<AccountHistory> _AccountHistoriesAsReal;
		
		private EntitySet<ClientsHistory> _ClientsHistoryAsOperational;
		
		private EntitySet<ClientsHistory> _ClientsHistoryAsReal;
		
		private EntitySet<ClientsHistory> _ClientsHistory;
		
		private EntitySet<AccountTemplate> _AccountTemplates;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Client> _OwnerClient;
		
		private EntityRef<Client> _ProviderClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOrganizationNameChanging(string value);
    partial void OnOrganizationNameChanged();
    partial void OnStatusChanging(global::Csharper.OliverTwist.Model.ClientStatus? value);
    partial void OnStatusChanged();
    partial void OnDeallerOfClientIdChanging(System.Nullable<long> value);
    partial void OnDeallerOfClientIdChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByClientIdChanging(System.Nullable<long> value);
    partial void OnCreatedByClientIdChanged();
    partial void OnAccountIdChanging(System.Nullable<long> value);
    partial void OnAccountIdChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Client()
		{
			this._Addresses = new EntitySet<AddressBook>(new Action<AddressBook>(this.attach_Addresses), new Action<AddressBook>(this.detach_Addresses));
			this._AddressGroups = new EntitySet<AddressGroup>(new Action<AddressGroup>(this.attach_AddressGroups), new Action<AddressGroup>(this.detach_AddressGroups));
			this._Distributions = new EntitySet<Distribution>(new Action<Distribution>(this.attach_Distributions), new Action<Distribution>(this.detach_Distributions));
			this._MessageTemplates = new EntitySet<MessageTemplate>(new Action<MessageTemplate>(this.attach_MessageTemplates), new Action<MessageTemplate>(this.detach_MessageTemplates));
			this._SenderNames = new EntitySet<SenderName>(new Action<SenderName>(this.attach_SenderNames), new Action<SenderName>(this.detach_SenderNames));
			this._UserAssigments = new EntitySet<Users2Client>(new Action<Users2Client>(this.attach_UserAssigments), new Action<Users2Client>(this.detach_UserAssigments));
			this._OwnedClients = new EntitySet<Client>(new Action<Client>(this.attach_OwnedClients), new Action<Client>(this.detach_OwnedClients));
			this._Deallers = new EntitySet<Client>(new Action<Client>(this.attach_Deallers), new Action<Client>(this.detach_Deallers));
			this._AccountOptionHistoriesAsOperational = new EntitySet<AccountOptionHistory>(new Action<AccountOptionHistory>(this.attach_AccountOptionHistoriesAsOperational), new Action<AccountOptionHistory>(this.detach_AccountOptionHistoriesAsOperational));
			this._AccountOptionHistoriesAsReal = new EntitySet<AccountOptionHistory>(new Action<AccountOptionHistory>(this.attach_AccountOptionHistoriesAsReal), new Action<AccountOptionHistory>(this.detach_AccountOptionHistoriesAsReal));
			this._CostRangesHistoriesAsOperational = new EntitySet<CostRangesHistory>(new Action<CostRangesHistory>(this.attach_CostRangesHistoriesAsOperational), new Action<CostRangesHistory>(this.detach_CostRangesHistoriesAsOperational));
			this._CostRangesHistoryAsReal = new EntitySet<CostRangesHistory>(new Action<CostRangesHistory>(this.attach_CostRangesHistoryAsReal), new Action<CostRangesHistory>(this.detach_CostRangesHistoryAsReal));
			this._DistributionHistoriesAsOperational = new EntitySet<DistributionHistory>(new Action<DistributionHistory>(this.attach_DistributionHistoriesAsOperational), new Action<DistributionHistory>(this.detach_DistributionHistoriesAsOperational));
			this._DistributionHistoriesAsReal = new EntitySet<DistributionHistory>(new Action<DistributionHistory>(this.attach_DistributionHistoriesAsReal), new Action<DistributionHistory>(this.detach_DistributionHistoriesAsReal));
			this._AccountHistoriesAsOperational = new EntitySet<AccountHistory>(new Action<AccountHistory>(this.attach_AccountHistoriesAsOperational), new Action<AccountHistory>(this.detach_AccountHistoriesAsOperational));
			this._AccountHistoriesAsReal = new EntitySet<AccountHistory>(new Action<AccountHistory>(this.attach_AccountHistoriesAsReal), new Action<AccountHistory>(this.detach_AccountHistoriesAsReal));
			this._ClientsHistoryAsOperational = new EntitySet<ClientsHistory>(new Action<ClientsHistory>(this.attach_ClientsHistoryAsOperational), new Action<ClientsHistory>(this.detach_ClientsHistoryAsOperational));
			this._ClientsHistoryAsReal = new EntitySet<ClientsHistory>(new Action<ClientsHistory>(this.attach_ClientsHistoryAsReal), new Action<ClientsHistory>(this.detach_ClientsHistoryAsReal));
			this._ClientsHistory = new EntitySet<ClientsHistory>(new Action<ClientsHistory>(this.attach_ClientsHistory), new Action<ClientsHistory>(this.detach_ClientsHistory));
			this._AccountTemplates = new EntitySet<AccountTemplate>(new Action<AccountTemplate>(this.attach_AccountTemplates), new Action<AccountTemplate>(this.detach_AccountTemplates));
			this._Account = default(EntityRef<Account>);
			this._OwnerClient = default(EntityRef<Client>);
			this._ProviderClient = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationName", DbType="NVarChar(4000)")]
		public string OrganizationName
		{
			get
			{
				return this._OrganizationName;
			}
			set
			{
				if ((this._OrganizationName != value))
				{
					this.OnOrganizationNameChanging(value);
					this.SendPropertyChanging();
					this._OrganizationName = value;
					this.SendPropertyChanged("OrganizationName");
					this.OnOrganizationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int", CanBeNull=true)]
		public global::Csharper.OliverTwist.Model.ClientStatus? Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeallerOfClientId", DbType="BigInt")]
		public System.Nullable<long> DeallerOfClientId
		{
			get
			{
				return this._DeallerOfClientId;
			}
			set
			{
				if ((this._DeallerOfClientId != value))
				{
					if (this._ProviderClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeallerOfClientIdChanging(value);
					this.SendPropertyChanging();
					this._DeallerOfClientId = value;
					this.SendPropertyChanged("DeallerOfClientId");
					this.OnDeallerOfClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByClientId", DbType="BigInt")]
		public System.Nullable<long> CreatedByClientId
		{
			get
			{
				return this._CreatedByClientId;
			}
			set
			{
				if ((this._CreatedByClientId != value))
				{
					if (this._OwnerClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByClientIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByClientId = value;
					this.SendPropertyChanged("CreatedByClientId");
					this.OnCreatedByClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt")]
		public System.Nullable<long> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AddressBook", Storage="_Addresses", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<AddressBook> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AddressGroup", Storage="_AddressGroups", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<AddressGroup> AddressGroups
		{
			get
			{
				return this._AddressGroups;
			}
			set
			{
				this._AddressGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Distribution", Storage="_Distributions", ThisKey="Id", OtherKey="CreatedByClientId")]
		public EntitySet<Distribution> Distributions
		{
			get
			{
				return this._Distributions;
			}
			set
			{
				this._Distributions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_MessageTemplate", Storage="_MessageTemplates", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<MessageTemplate> MessageTemplates
		{
			get
			{
				return this._MessageTemplates;
			}
			set
			{
				this._MessageTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_SenderName", Storage="_SenderNames", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<SenderName> SenderNames
		{
			get
			{
				return this._SenderNames;
			}
			set
			{
				this._SenderNames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Users2Client", Storage="_UserAssigments", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<Users2Client> UserAssigments
		{
			get
			{
				return this._UserAssigments;
			}
			set
			{
				this._UserAssigments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Client", Storage="_OwnedClients", ThisKey="Id", OtherKey="CreatedByClientId")]
		public EntitySet<Client> OwnedClients
		{
			get
			{
				return this._OwnedClients;
			}
			set
			{
				this._OwnedClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Client1", Storage="_Deallers", ThisKey="Id", OtherKey="DeallerOfClientId")]
		public EntitySet<Client> Deallers
		{
			get
			{
				return this._Deallers;
			}
			set
			{
				this._Deallers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AccountOptionHistory", Storage="_AccountOptionHistoriesAsOperational", ThisKey="Id", OtherKey="OperationalClientId")]
		public EntitySet<AccountOptionHistory> AccountOptionHistoriesAsOperational
		{
			get
			{
				return this._AccountOptionHistoriesAsOperational;
			}
			set
			{
				this._AccountOptionHistoriesAsOperational.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AccountOptionHistory1", Storage="_AccountOptionHistoriesAsReal", ThisKey="Id", OtherKey="RealClientId")]
		public EntitySet<AccountOptionHistory> AccountOptionHistoriesAsReal
		{
			get
			{
				return this._AccountOptionHistoriesAsReal;
			}
			set
			{
				this._AccountOptionHistoriesAsReal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CostRangesHistory", Storage="_CostRangesHistoriesAsOperational", ThisKey="Id", OtherKey="OperationalClientId")]
		public EntitySet<CostRangesHistory> CostRangesHistoriesAsOperational
		{
			get
			{
				return this._CostRangesHistoriesAsOperational;
			}
			set
			{
				this._CostRangesHistoriesAsOperational.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CostRangesHistory1", Storage="_CostRangesHistoryAsReal", ThisKey="Id", OtherKey="RealClientId")]
		public EntitySet<CostRangesHistory> CostRangesHistoryAsReal
		{
			get
			{
				return this._CostRangesHistoryAsReal;
			}
			set
			{
				this._CostRangesHistoryAsReal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_DistributionHistory", Storage="_DistributionHistoriesAsOperational", ThisKey="Id", OtherKey="OperationalClientId")]
		public EntitySet<DistributionHistory> DistributionHistoriesAsOperational
		{
			get
			{
				return this._DistributionHistoriesAsOperational;
			}
			set
			{
				this._DistributionHistoriesAsOperational.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_DistributionHistory1", Storage="_DistributionHistoriesAsReal", ThisKey="Id", OtherKey="RealClientId")]
		public EntitySet<DistributionHistory> DistributionHistoriesAsReal
		{
			get
			{
				return this._DistributionHistoriesAsReal;
			}
			set
			{
				this._DistributionHistoriesAsReal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AccountHistory", Storage="_AccountHistoriesAsOperational", ThisKey="Id", OtherKey="OperationalClientId")]
		public EntitySet<AccountHistory> AccountHistoriesAsOperational
		{
			get
			{
				return this._AccountHistoriesAsOperational;
			}
			set
			{
				this._AccountHistoriesAsOperational.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AccountHistory1", Storage="_AccountHistoriesAsReal", ThisKey="Id", OtherKey="RealClientId")]
		public EntitySet<AccountHistory> AccountHistoriesAsReal
		{
			get
			{
				return this._AccountHistoriesAsReal;
			}
			set
			{
				this._AccountHistoriesAsReal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientsHistory", Storage="_ClientsHistoryAsOperational", ThisKey="Id", OtherKey="OperationalClientId")]
		public EntitySet<ClientsHistory> ClientsHistoryAsOperational
		{
			get
			{
				return this._ClientsHistoryAsOperational;
			}
			set
			{
				this._ClientsHistoryAsOperational.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientsHistory1", Storage="_ClientsHistoryAsReal", ThisKey="Id", OtherKey="RealClientId")]
		public EntitySet<ClientsHistory> ClientsHistoryAsReal
		{
			get
			{
				return this._ClientsHistoryAsReal;
			}
			set
			{
				this._ClientsHistoryAsReal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientsHistory2", Storage="_ClientsHistory", ThisKey="Id", OtherKey="Id")]
		public EntitySet<ClientsHistory> ClientsHistory
		{
			get
			{
				return this._ClientsHistory;
			}
			set
			{
				this._ClientsHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AccountTemplate", Storage="_AccountTemplates", ThisKey="Id", OtherKey="ClientOwnerId")]
		public EntitySet<AccountTemplate> AccountTemplates
		{
			get
			{
				return this._AccountTemplates;
			}
			set
			{
				this._AccountTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Client", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.HolderClient = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.HolderClient = this;
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Client", Storage="_OwnerClient", ThisKey="CreatedByClientId", OtherKey="Id", IsForeignKey=true)]
		public Client OwnerClient
		{
			get
			{
				return this._OwnerClient.Entity;
			}
			set
			{
				Client previousValue = this._OwnerClient.Entity;
				if (((previousValue != value) 
							|| (this._OwnerClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerClient.Entity = null;
						previousValue.OwnedClients.Remove(this);
					}
					this._OwnerClient.Entity = value;
					if ((value != null))
					{
						value.OwnedClients.Add(this);
						this._CreatedByClientId = value.Id;
					}
					else
					{
						this._CreatedByClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("OwnerClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Client1", Storage="_ProviderClient", ThisKey="DeallerOfClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ProviderClient
		{
			get
			{
				return this._ProviderClient.Entity;
			}
			set
			{
				Client previousValue = this._ProviderClient.Entity;
				if (((previousValue != value) 
							|| (this._ProviderClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProviderClient.Entity = null;
						previousValue.Deallers.Remove(this);
					}
					this._ProviderClient.Entity = value;
					if ((value != null))
					{
						value.Deallers.Add(this);
						this._DeallerOfClientId = value.Id;
					}
					else
					{
						this._DeallerOfClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ProviderClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(AddressBook entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = this;
		}
		
		private void detach_Addresses(AddressBook entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = null;
		}
		
		private void attach_AddressGroups(AddressGroup entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = this;
		}
		
		private void detach_AddressGroups(AddressGroup entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = null;
		}
		
		private void attach_Distributions(Distribution entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = this;
		}
		
		private void detach_Distributions(Distribution entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = null;
		}
		
		private void attach_MessageTemplates(MessageTemplate entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = this;
		}
		
		private void detach_MessageTemplates(MessageTemplate entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = null;
		}
		
		private void attach_SenderNames(SenderName entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = this;
		}
		
		private void detach_SenderNames(SenderName entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = null;
		}
		
		private void attach_UserAssigments(Users2Client entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_UserAssigments(Users2Client entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_OwnedClients(Client entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = this;
		}
		
		private void detach_OwnedClients(Client entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = null;
		}
		
		private void attach_Deallers(Client entity)
		{
			this.SendPropertyChanging();
			entity.ProviderClient = this;
		}
		
		private void detach_Deallers(Client entity)
		{
			this.SendPropertyChanging();
			entity.ProviderClient = null;
		}
		
		private void attach_AccountOptionHistoriesAsOperational(AccountOptionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionOperationalClient = this;
		}
		
		private void detach_AccountOptionHistoriesAsOperational(AccountOptionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionOperationalClient = null;
		}
		
		private void attach_AccountOptionHistoriesAsReal(AccountOptionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionRealClient = this;
		}
		
		private void detach_AccountOptionHistoriesAsReal(AccountOptionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionRealClient = null;
		}
		
		private void attach_CostRangesHistoriesAsOperational(CostRangesHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionOperationalClient = this;
		}
		
		private void detach_CostRangesHistoriesAsOperational(CostRangesHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionOperationalClient = null;
		}
		
		private void attach_CostRangesHistoryAsReal(CostRangesHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionRealClient = this;
		}
		
		private void detach_CostRangesHistoryAsReal(CostRangesHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionRealClient = null;
		}
		
		private void attach_DistributionHistoriesAsOperational(DistributionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionOperationalClient = this;
		}
		
		private void detach_DistributionHistoriesAsOperational(DistributionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionOperationalClient = null;
		}
		
		private void attach_DistributionHistoriesAsReal(DistributionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionRealClient = this;
		}
		
		private void detach_DistributionHistoriesAsReal(DistributionHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionRealClient = null;
		}
		
		private void attach_AccountHistoriesAsOperational(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionOperationalClient = this;
		}
		
		private void detach_AccountHistoriesAsOperational(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionOperationalClient = null;
		}
		
		private void attach_AccountHistoriesAsReal(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionRealClient = this;
		}
		
		private void detach_AccountHistoriesAsReal(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionRealClient = null;
		}
		
		private void attach_ClientsHistoryAsOperational(ClientsHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionOperationalClient = this;
		}
		
		private void detach_ClientsHistoryAsOperational(ClientsHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionOperationalClient = null;
		}
		
		private void attach_ClientsHistoryAsReal(ClientsHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionRealClient = this;
		}
		
		private void detach_ClientsHistoryAsReal(ClientsHistory entity)
		{
			this.SendPropertyChanging();
			entity.ActionRealClient = null;
		}
		
		private void attach_ClientsHistory(ClientsHistory entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_ClientsHistory(ClientsHistory entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_AccountTemplates(AccountTemplate entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = this;
		}
		
		private void detach_AccountTemplates(AccountTemplate entity)
		{
			this.SendPropertyChanging();
			entity.OwnerClient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostRanges")]
	public partial class CostRange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _AccountId;
		
		private decimal _Cost;
		
		private long _Volume;
		
		private bool _IsDeleted;
		
		private System.Nullable<decimal> _LowerSumm;
		
		private EntitySet<CostRangesHistory> _CostRangesHistories;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(System.Nullable<long> value);
    partial void OnAccountIdChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnVolumeChanging(long value);
    partial void OnVolumeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnLowerSummChanging(System.Nullable<decimal> value);
    partial void OnLowerSummChanged();
    #endregion
		
		public CostRange()
		{
			this._CostRangesHistories = new EntitySet<CostRangesHistory>(new Action<CostRangesHistory>(this.attach_CostRangesHistories), new Action<CostRangesHistory>(this.detach_CostRangesHistories));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt")]
		public System.Nullable<long> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(18,0) NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="BigInt NOT NULL")]
		public long Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowerSumm", AutoSync=AutoSync.Always, DbType="Decimal", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> LowerSumm
		{
			get
			{
				return this._LowerSumm;
			}
			set
			{
				if ((this._LowerSumm != value))
				{
					this.OnLowerSummChanging(value);
					this.SendPropertyChanging();
					this._LowerSumm = value;
					this.SendPropertyChanged("LowerSumm");
					this.OnLowerSummChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostRange_CostRangesHistory", Storage="_CostRangesHistories", ThisKey="Id", OtherKey="Id")]
		public EntitySet<CostRangesHistory> CostRangesHistories
		{
			get
			{
				return this._CostRangesHistories;
			}
			set
			{
				this._CostRangesHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_CostRange", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.CostRanges.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.CostRanges.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CostRangesHistories(CostRangesHistory entity)
		{
			this.SendPropertyChanging();
			entity.CostRange = this;
		}
		
		private void detach_CostRangesHistories(CostRangesHistory entity)
		{
			this.SendPropertyChanging();
			entity.CostRange = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountOptionHistory")]
	public partial class AccountOptionHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VersionId;
		
		private long _Id;
		
		private global::Csharper.OliverTwist.Model.AccountType _AccountType;
		
		private global::Csharper.OliverTwist.Model.DebtingType _DebtingType;
		
		private bool _IsDeleted;
		
		private global::Csharper.OliverTwist.Model.HistoryAction? _Action;
		
		private System.Nullable<System.Guid> _ManagerId;
		
		private System.Nullable<long> _RealClientId;
		
		private System.Nullable<long> _OperationalClientId;
		
		private System.DateTime _VersionDate;
		
		private EntityRef<aspnet_User> _ActionUser;
		
		private EntityRef<Client> _ActionOperationalClient;
		
		private EntityRef<Client> _ActionRealClient;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionIdChanging(long value);
    partial void OnVersionIdChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountTypeChanging(global::Csharper.OliverTwist.Model.AccountType value);
    partial void OnAccountTypeChanged();
    partial void OnDebtingTypeChanging(global::Csharper.OliverTwist.Model.DebtingType value);
    partial void OnDebtingTypeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnActionChanging(global::Csharper.OliverTwist.Model.HistoryAction? value);
    partial void OnActionChanged();
    partial void OnManagerIdChanging(System.Nullable<System.Guid> value);
    partial void OnManagerIdChanged();
    partial void OnRealClientIdChanging(System.Nullable<long> value);
    partial void OnRealClientIdChanged();
    partial void OnOperationalClientIdChanging(System.Nullable<long> value);
    partial void OnOperationalClientIdChanged();
    partial void OnVersionDateChanging(System.DateTime value);
    partial void OnVersionDateChanged();
    #endregion
		
		public AccountOptionHistory()
		{
			this._ActionUser = default(EntityRef<aspnet_User>);
			this._ActionOperationalClient = default(EntityRef<Client>);
			this._ActionRealClient = default(EntityRef<Client>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VersionId
		{
			get
			{
				return this._VersionId;
			}
			set
			{
				if ((this._VersionId != value))
				{
					this.OnVersionIdChanging(value);
					this.SendPropertyChanging();
					this._VersionId = value;
					this.SendPropertyChanged("VersionId");
					this.OnVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountType", DbType="Int NOT NULL", CanBeNull=false)]
		public global::Csharper.OliverTwist.Model.AccountType AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebtingType", DbType="Int NOT NULL", CanBeNull=false)]
		public global::Csharper.OliverTwist.Model.DebtingType DebtingType
		{
			get
			{
				return this._DebtingType;
			}
			set
			{
				if ((this._DebtingType != value))
				{
					this.OnDebtingTypeChanging(value);
					this.SendPropertyChanging();
					this._DebtingType = value;
					this.SendPropertyChanged("DebtingType");
					this.OnDebtingTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Int", CanBeNull=true)]
		public global::Csharper.OliverTwist.Model.HistoryAction? Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ManagerId
		{
			get
			{
				return this._ManagerId;
			}
			set
			{
				if ((this._ManagerId != value))
				{
					if (this._ActionUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIdChanging(value);
					this.SendPropertyChanging();
					this._ManagerId = value;
					this.SendPropertyChanged("ManagerId");
					this.OnManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealClientId", DbType="BigInt NOT NULL")]
		public System.Nullable<long> RealClientId
		{
			get
			{
				return this._RealClientId;
			}
			set
			{
				if ((this._RealClientId != value))
				{
					if (this._ActionRealClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealClientIdChanging(value);
					this.SendPropertyChanging();
					this._RealClientId = value;
					this.SendPropertyChanged("RealClientId");
					this.OnRealClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationalClientId", DbType="BigInt NOT NULL")]
		public System.Nullable<long> OperationalClientId
		{
			get
			{
				return this._OperationalClientId;
			}
			set
			{
				if ((this._OperationalClientId != value))
				{
					if (this._ActionOperationalClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationalClientIdChanging(value);
					this.SendPropertyChanging();
					this._OperationalClientId = value;
					this.SendPropertyChanged("OperationalClientId");
					this.OnOperationalClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDate", DbType="DateTime NOT NULL")]
		public System.DateTime VersionDate
		{
			get
			{
				return this._VersionDate;
			}
			set
			{
				if ((this._VersionDate != value))
				{
					this.OnVersionDateChanging(value);
					this.SendPropertyChanging();
					this._VersionDate = value;
					this.SendPropertyChanged("VersionDate");
					this.OnVersionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_AccountOptionHistory", Storage="_ActionUser", ThisKey="ManagerId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User ActionUser
		{
			get
			{
				return this._ActionUser.Entity;
			}
			set
			{
				aspnet_User previousValue = this._ActionUser.Entity;
				if (((previousValue != value) 
							|| (this._ActionUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionUser.Entity = null;
						previousValue.AccountOptionHistories.Remove(this);
					}
					this._ActionUser.Entity = value;
					if ((value != null))
					{
						value.AccountOptionHistories.Add(this);
						this._ManagerId = value.UserId;
					}
					else
					{
						this._ManagerId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ActionUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AccountOptionHistory", Storage="_ActionOperationalClient", ThisKey="OperationalClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ActionOperationalClient
		{
			get
			{
				return this._ActionOperationalClient.Entity;
			}
			set
			{
				Client previousValue = this._ActionOperationalClient.Entity;
				if (((previousValue != value) 
							|| (this._ActionOperationalClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionOperationalClient.Entity = null;
						previousValue.AccountOptionHistoriesAsOperational.Remove(this);
					}
					this._ActionOperationalClient.Entity = value;
					if ((value != null))
					{
						value.AccountOptionHistoriesAsOperational.Add(this);
						this._OperationalClientId = value.Id;
					}
					else
					{
						this._OperationalClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActionOperationalClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AccountOptionHistory1", Storage="_ActionRealClient", ThisKey="RealClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ActionRealClient
		{
			get
			{
				return this._ActionRealClient.Entity;
			}
			set
			{
				Client previousValue = this._ActionRealClient.Entity;
				if (((previousValue != value) 
							|| (this._ActionRealClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionRealClient.Entity = null;
						previousValue.AccountOptionHistoriesAsReal.Remove(this);
					}
					this._ActionRealClient.Entity = value;
					if ((value != null))
					{
						value.AccountOptionHistoriesAsReal.Add(this);
						this._RealClientId = value.Id;
					}
					else
					{
						this._RealClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActionRealClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountOptionHistory", Storage="_Account", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountOptionHistories.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountOptionHistories.Add(this);
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostRangesHistory")]
	public partial class CostRangesHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VersionId;
		
		private long _Id;
		
		private long _AccountId;
		
		private decimal _Cost;
		
		private long _Volume;
		
		private bool _IsDeleted;
		
		private global::Csharper.OliverTwist.Model.HistoryAction? _Action;
		
		private System.Nullable<System.Guid> _ManagerId;
		
		private System.Nullable<long> _RealClientId;
		
		private System.Nullable<long> _OperationalClientId;
		
		private System.DateTime _VersionDate;
		
		private EntitySet<AccountHistory> _AccountHistories;
		
		private EntityRef<aspnet_User> _ActionUser;
		
		private EntityRef<Client> _ActionOperationalClient;
		
		private EntityRef<Client> _ActionRealClient;
		
		private EntityRef<CostRange> _CostRange;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionIdChanging(long value);
    partial void OnVersionIdChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnVolumeChanging(long value);
    partial void OnVolumeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnActionChanging(global::Csharper.OliverTwist.Model.HistoryAction? value);
    partial void OnActionChanged();
    partial void OnManagerIdChanging(System.Nullable<System.Guid> value);
    partial void OnManagerIdChanged();
    partial void OnRealClientIdChanging(System.Nullable<long> value);
    partial void OnRealClientIdChanged();
    partial void OnOperationalClientIdChanging(System.Nullable<long> value);
    partial void OnOperationalClientIdChanged();
    partial void OnVersionDateChanging(System.DateTime value);
    partial void OnVersionDateChanged();
    #endregion
		
		public CostRangesHistory()
		{
			this._AccountHistories = new EntitySet<AccountHistory>(new Action<AccountHistory>(this.attach_AccountHistories), new Action<AccountHistory>(this.detach_AccountHistories));
			this._ActionUser = default(EntityRef<aspnet_User>);
			this._ActionOperationalClient = default(EntityRef<Client>);
			this._ActionRealClient = default(EntityRef<Client>);
			this._CostRange = default(EntityRef<CostRange>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VersionId
		{
			get
			{
				return this._VersionId;
			}
			set
			{
				if ((this._VersionId != value))
				{
					this.OnVersionIdChanging(value);
					this.SendPropertyChanging();
					this._VersionId = value;
					this.SendPropertyChanged("VersionId");
					this.OnVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._CostRange.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(18,0) NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="BigInt NOT NULL")]
		public long Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Int", CanBeNull=true)]
		public global::Csharper.OliverTwist.Model.HistoryAction? Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerId", DbType="UniqueIdentifier NOT NULL")]
		public System.Nullable<System.Guid> ManagerId
		{
			get
			{
				return this._ManagerId;
			}
			set
			{
				if ((this._ManagerId != value))
				{
					if (this._ActionUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIdChanging(value);
					this.SendPropertyChanging();
					this._ManagerId = value;
					this.SendPropertyChanged("ManagerId");
					this.OnManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealClientId", DbType="BigInt NOT NULL")]
		public System.Nullable<long> RealClientId
		{
			get
			{
				return this._RealClientId;
			}
			set
			{
				if ((this._RealClientId != value))
				{
					if (this._ActionRealClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealClientIdChanging(value);
					this.SendPropertyChanging();
					this._RealClientId = value;
					this.SendPropertyChanged("RealClientId");
					this.OnRealClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationalClientId", DbType="BigInt NOT NULL")]
		public System.Nullable<long> OperationalClientId
		{
			get
			{
				return this._OperationalClientId;
			}
			set
			{
				if ((this._OperationalClientId != value))
				{
					if (this._ActionOperationalClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationalClientIdChanging(value);
					this.SendPropertyChanging();
					this._OperationalClientId = value;
					this.SendPropertyChanged("OperationalClientId");
					this.OnOperationalClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDate", DbType="DateTime NOT NULL")]
		public System.DateTime VersionDate
		{
			get
			{
				return this._VersionDate;
			}
			set
			{
				if ((this._VersionDate != value))
				{
					this.OnVersionDateChanging(value);
					this.SendPropertyChanging();
					this._VersionDate = value;
					this.SendPropertyChanged("VersionDate");
					this.OnVersionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostRangesHistory_AccountHistory", Storage="_AccountHistories", ThisKey="VersionId", OtherKey="CostRangeId")]
		public EntitySet<AccountHistory> AccountHistories
		{
			get
			{
				return this._AccountHistories;
			}
			set
			{
				this._AccountHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_CostRangesHistory", Storage="_ActionUser", ThisKey="ManagerId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User ActionUser
		{
			get
			{
				return this._ActionUser.Entity;
			}
			set
			{
				aspnet_User previousValue = this._ActionUser.Entity;
				if (((previousValue != value) 
							|| (this._ActionUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionUser.Entity = null;
						previousValue.CostRangesHistories.Remove(this);
					}
					this._ActionUser.Entity = value;
					if ((value != null))
					{
						value.CostRangesHistories.Add(this);
						this._ManagerId = value.UserId;
					}
					else
					{
						this._ManagerId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ActionUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CostRangesHistory", Storage="_ActionOperationalClient", ThisKey="OperationalClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ActionOperationalClient
		{
			get
			{
				return this._ActionOperationalClient.Entity;
			}
			set
			{
				Client previousValue = this._ActionOperationalClient.Entity;
				if (((previousValue != value) 
							|| (this._ActionOperationalClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionOperationalClient.Entity = null;
						previousValue.CostRangesHistoriesAsOperational.Remove(this);
					}
					this._ActionOperationalClient.Entity = value;
					if ((value != null))
					{
						value.CostRangesHistoriesAsOperational.Add(this);
						this._OperationalClientId = value.Id;
					}
					else
					{
						this._OperationalClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActionOperationalClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CostRangesHistory1", Storage="_ActionRealClient", ThisKey="RealClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ActionRealClient
		{
			get
			{
				return this._ActionRealClient.Entity;
			}
			set
			{
				Client previousValue = this._ActionRealClient.Entity;
				if (((previousValue != value) 
							|| (this._ActionRealClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionRealClient.Entity = null;
						previousValue.CostRangesHistoryAsReal.Remove(this);
					}
					this._ActionRealClient.Entity = value;
					if ((value != null))
					{
						value.CostRangesHistoryAsReal.Add(this);
						this._RealClientId = value.Id;
					}
					else
					{
						this._RealClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActionRealClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostRange_CostRangesHistory", Storage="_CostRange", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public CostRange CostRange
		{
			get
			{
				return this._CostRange.Entity;
			}
			set
			{
				CostRange previousValue = this._CostRange.Entity;
				if (((previousValue != value) 
							|| (this._CostRange.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostRange.Entity = null;
						previousValue.CostRangesHistories.Remove(this);
					}
					this._CostRange.Entity = value;
					if ((value != null))
					{
						value.CostRangesHistories.Add(this);
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(long);
					}
					this.SendPropertyChanged("CostRange");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_CostRangesHistory", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.CostRangesHistories.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.CostRangesHistories.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountHistories(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.CostRangesHistory = this;
		}
		
		private void detach_AccountHistories(AccountHistory entity)
		{
			this.SendPropertyChanging();
			entity.CostRangesHistory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DistributionHistory")]
	public partial class DistributionHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VersionId;
		
		private long _Id;
		
		private global::Csharper.OliverTwist.Model.DistributionStatus _Status;
		
		private bool _IsDeleted;
		
		private global::Csharper.OliverTwist.Model.HistoryAction? _Action;
		
		private System.Nullable<System.Guid> _ManagerId;
		
		private long _RealClientId;
		
		private long _OperationalClientId;
		
		private System.DateTime _VersionDate;
		
		private EntityRef<aspnet_User> _ActionUser;
		
		private EntityRef<Client> _ActionOperationalClient;
		
		private EntityRef<Client> _ActionRealClient;
		
		private EntityRef<Distribution> _Distribution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionIdChanging(long value);
    partial void OnVersionIdChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnStatusChanging(global::Csharper.OliverTwist.Model.DistributionStatus value);
    partial void OnStatusChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnActionChanging(global::Csharper.OliverTwist.Model.HistoryAction? value);
    partial void OnActionChanged();
    partial void OnManagerIdChanging(System.Nullable<System.Guid> value);
    partial void OnManagerIdChanged();
    partial void OnRealClientIdChanging(long value);
    partial void OnRealClientIdChanged();
    partial void OnOperationalClientIdChanging(long value);
    partial void OnOperationalClientIdChanged();
    partial void OnVersionDateChanging(System.DateTime value);
    partial void OnVersionDateChanged();
    #endregion
		
		public DistributionHistory()
		{
			this._ActionUser = default(EntityRef<aspnet_User>);
			this._ActionOperationalClient = default(EntityRef<Client>);
			this._ActionRealClient = default(EntityRef<Client>);
			this._Distribution = default(EntityRef<Distribution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VersionId
		{
			get
			{
				return this._VersionId;
			}
			set
			{
				if ((this._VersionId != value))
				{
					this.OnVersionIdChanging(value);
					this.SendPropertyChanging();
					this._VersionId = value;
					this.SendPropertyChanged("VersionId");
					this.OnVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Distribution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL", CanBeNull=false)]
		public global::Csharper.OliverTwist.Model.DistributionStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Int", CanBeNull=true)]
		public global::Csharper.OliverTwist.Model.HistoryAction? Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ManagerId
		{
			get
			{
				return this._ManagerId;
			}
			set
			{
				if ((this._ManagerId != value))
				{
					if (this._ActionUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIdChanging(value);
					this.SendPropertyChanging();
					this._ManagerId = value;
					this.SendPropertyChanged("ManagerId");
					this.OnManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealClientId", DbType="BigInt NOT NULL")]
		public long RealClientId
		{
			get
			{
				return this._RealClientId;
			}
			set
			{
				if ((this._RealClientId != value))
				{
					if (this._ActionRealClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealClientIdChanging(value);
					this.SendPropertyChanging();
					this._RealClientId = value;
					this.SendPropertyChanged("RealClientId");
					this.OnRealClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationalClientId", DbType="BigInt NOT NULL")]
		public long OperationalClientId
		{
			get
			{
				return this._OperationalClientId;
			}
			set
			{
				if ((this._OperationalClientId != value))
				{
					if (this._ActionOperationalClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationalClientIdChanging(value);
					this.SendPropertyChanging();
					this._OperationalClientId = value;
					this.SendPropertyChanged("OperationalClientId");
					this.OnOperationalClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDate", DbType="DateTime NOT NULL")]
		public System.DateTime VersionDate
		{
			get
			{
				return this._VersionDate;
			}
			set
			{
				if ((this._VersionDate != value))
				{
					this.OnVersionDateChanging(value);
					this.SendPropertyChanging();
					this._VersionDate = value;
					this.SendPropertyChanged("VersionDate");
					this.OnVersionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_DistributionHistory", Storage="_ActionUser", ThisKey="ManagerId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User ActionUser
		{
			get
			{
				return this._ActionUser.Entity;
			}
			set
			{
				aspnet_User previousValue = this._ActionUser.Entity;
				if (((previousValue != value) 
							|| (this._ActionUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionUser.Entity = null;
						previousValue.DistributionHistories.Remove(this);
					}
					this._ActionUser.Entity = value;
					if ((value != null))
					{
						value.DistributionHistories.Add(this);
						this._ManagerId = value.UserId;
					}
					else
					{
						this._ManagerId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ActionUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_DistributionHistory", Storage="_ActionOperationalClient", ThisKey="OperationalClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ActionOperationalClient
		{
			get
			{
				return this._ActionOperationalClient.Entity;
			}
			set
			{
				Client previousValue = this._ActionOperationalClient.Entity;
				if (((previousValue != value) 
							|| (this._ActionOperationalClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionOperationalClient.Entity = null;
						previousValue.DistributionHistoriesAsOperational.Remove(this);
					}
					this._ActionOperationalClient.Entity = value;
					if ((value != null))
					{
						value.DistributionHistoriesAsOperational.Add(this);
						this._OperationalClientId = value.Id;
					}
					else
					{
						this._OperationalClientId = default(long);
					}
					this.SendPropertyChanged("ActionOperationalClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_DistributionHistory1", Storage="_ActionRealClient", ThisKey="RealClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ActionRealClient
		{
			get
			{
				return this._ActionRealClient.Entity;
			}
			set
			{
				Client previousValue = this._ActionRealClient.Entity;
				if (((previousValue != value) 
							|| (this._ActionRealClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionRealClient.Entity = null;
						previousValue.DistributionHistoriesAsReal.Remove(this);
					}
					this._ActionRealClient.Entity = value;
					if ((value != null))
					{
						value.DistributionHistoriesAsReal.Add(this);
						this._RealClientId = value.Id;
					}
					else
					{
						this._RealClientId = default(long);
					}
					this.SendPropertyChanged("ActionRealClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Distribution_DistributionHistory", Storage="_Distribution", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Distribution Distribution
		{
			get
			{
				return this._Distribution.Entity;
			}
			set
			{
				Distribution previousValue = this._Distribution.Entity;
				if (((previousValue != value) 
							|| (this._Distribution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Distribution.Entity = null;
						previousValue.DistributionHistories.Remove(this);
					}
					this._Distribution.Entity = value;
					if ((value != null))
					{
						value.DistributionHistories.Add(this);
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(long);
					}
					this.SendPropertyChanged("Distribution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountHistory")]
	public partial class AccountHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VersionId;
		
		private long _Id;
		
		private System.Nullable<long> _CostRangeId;
		
		private decimal _Amount;
		
		private decimal _AmountDelta;
		
		private decimal _QuickCost;
		
		private decimal _MoneyVolume;
		
		private System.Nullable<System.Guid> _ManagerId;
		
		private System.Nullable<long> _RealClientId;
		
		private System.Nullable<long> _OperationalClientId;
		
		private System.DateTime _VersionDate;
		
		private string _Comment;
		
		private System.Nullable<long> _DistributionId;
		
		private System.Nullable<long> _TargetAccountId;
		
		private EntityRef<AccountHistory> _PayerAccountRecord;
		
		private EntityRef<aspnet_User> _ActionUser;
		
		private EntityRef<Client> _ActionOperationalClient;
		
		private EntityRef<Client> _ActionRealClient;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<CostRangesHistory> _CostRangesHistory;
		
		private EntityRef<AccountHistory> _RecieverAccountRecord;
		
		private EntityRef<Distribution> _Distribution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionIdChanging(long value);
    partial void OnVersionIdChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCostRangeIdChanging(System.Nullable<long> value);
    partial void OnCostRangeIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnAmountDeltaChanging(decimal value);
    partial void OnAmountDeltaChanged();
    partial void OnQuickCostChanging(decimal value);
    partial void OnQuickCostChanged();
    partial void OnMoneyVolumeChanging(decimal value);
    partial void OnMoneyVolumeChanged();
    partial void OnManagerIdChanging(System.Nullable<System.Guid> value);
    partial void OnManagerIdChanged();
    partial void OnRealClientIdChanging(System.Nullable<long> value);
    partial void OnRealClientIdChanged();
    partial void OnOperationalClientIdChanging(System.Nullable<long> value);
    partial void OnOperationalClientIdChanged();
    partial void OnVersionDateChanging(System.DateTime value);
    partial void OnVersionDateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnDistributionIdChanging(System.Nullable<long> value);
    partial void OnDistributionIdChanged();
    partial void OnTargetAccountIdChanging(System.Nullable<long> value);
    partial void OnTargetAccountIdChanged();
    #endregion
		
		public AccountHistory()
		{
			this._PayerAccountRecord = default(EntityRef<AccountHistory>);
			this._ActionUser = default(EntityRef<aspnet_User>);
			this._ActionOperationalClient = default(EntityRef<Client>);
			this._ActionRealClient = default(EntityRef<Client>);
			this._Account = default(EntityRef<Account>);
			this._CostRangesHistory = default(EntityRef<CostRangesHistory>);
			this._RecieverAccountRecord = default(EntityRef<AccountHistory>);
			this._Distribution = default(EntityRef<Distribution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VersionId
		{
			get
			{
				return this._VersionId;
			}
			set
			{
				if ((this._VersionId != value))
				{
					this.OnVersionIdChanging(value);
					this.SendPropertyChanging();
					this._VersionId = value;
					this.SendPropertyChanged("VersionId");
					this.OnVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostRangeId", DbType="BigInt")]
		public System.Nullable<long> CostRangeId
		{
			get
			{
				return this._CostRangeId;
			}
			set
			{
				if ((this._CostRangeId != value))
				{
					if (this._CostRangesHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostRangeIdChanging(value);
					this.SendPropertyChanging();
					this._CostRangeId = value;
					this.SendPropertyChanged("CostRangeId");
					this.OnCostRangeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,0) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountDelta", DbType="Decimal(18,0) NOT NULL")]
		public decimal AmountDelta
		{
			get
			{
				return this._AmountDelta;
			}
			set
			{
				if ((this._AmountDelta != value))
				{
					this.OnAmountDeltaChanging(value);
					this.SendPropertyChanging();
					this._AmountDelta = value;
					this.SendPropertyChanged("AmountDelta");
					this.OnAmountDeltaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuickCost", DbType="Decimal(18,0) NOT NULL")]
		public decimal QuickCost
		{
			get
			{
				return this._QuickCost;
			}
			set
			{
				if ((this._QuickCost != value))
				{
					this.OnQuickCostChanging(value);
					this.SendPropertyChanging();
					this._QuickCost = value;
					this.SendPropertyChanged("QuickCost");
					this.OnQuickCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyVolume", DbType="Decimal(18,0) NOT NULL")]
		public decimal MoneyVolume
		{
			get
			{
				return this._MoneyVolume;
			}
			set
			{
				if ((this._MoneyVolume != value))
				{
					this.OnMoneyVolumeChanging(value);
					this.SendPropertyChanging();
					this._MoneyVolume = value;
					this.SendPropertyChanged("MoneyVolume");
					this.OnMoneyVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ManagerId
		{
			get
			{
				return this._ManagerId;
			}
			set
			{
				if ((this._ManagerId != value))
				{
					if (this._ActionUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIdChanging(value);
					this.SendPropertyChanging();
					this._ManagerId = value;
					this.SendPropertyChanged("ManagerId");
					this.OnManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealClientId", DbType="BigInt")]
		public System.Nullable<long> RealClientId
		{
			get
			{
				return this._RealClientId;
			}
			set
			{
				if ((this._RealClientId != value))
				{
					if (this._ActionRealClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealClientIdChanging(value);
					this.SendPropertyChanging();
					this._RealClientId = value;
					this.SendPropertyChanged("RealClientId");
					this.OnRealClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationalClientId", DbType="BigInt")]
		public System.Nullable<long> OperationalClientId
		{
			get
			{
				return this._OperationalClientId;
			}
			set
			{
				if ((this._OperationalClientId != value))
				{
					if (this._ActionOperationalClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationalClientIdChanging(value);
					this.SendPropertyChanging();
					this._OperationalClientId = value;
					this.SendPropertyChanged("OperationalClientId");
					this.OnOperationalClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDate", DbType="DateTime NOT NULL")]
		public System.DateTime VersionDate
		{
			get
			{
				return this._VersionDate;
			}
			set
			{
				if ((this._VersionDate != value))
				{
					this.OnVersionDateChanging(value);
					this.SendPropertyChanging();
					this._VersionDate = value;
					this.SendPropertyChanged("VersionDate");
					this.OnVersionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistributionId", DbType="BIGINT")]
		public System.Nullable<long> DistributionId
		{
			get
			{
				return this._DistributionId;
			}
			set
			{
				if ((this._DistributionId != value))
				{
					if (this._Distribution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistributionIdChanging(value);
					this.SendPropertyChanging();
					this._DistributionId = value;
					this.SendPropertyChanged("DistributionId");
					this.OnDistributionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetAccountId", DbType="BIGINT")]
		public System.Nullable<long> TargetAccountId
		{
			get
			{
				return this._TargetAccountId;
			}
			set
			{
				if ((this._TargetAccountId != value))
				{
					if (this._RecieverAccountRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetAccountIdChanging(value);
					this.SendPropertyChanging();
					this._TargetAccountId = value;
					this.SendPropertyChanged("TargetAccountId");
					this.OnTargetAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountHistory_AccountHistory", Storage="_PayerAccountRecord", ThisKey="VersionId", OtherKey="TargetAccountId", IsUnique=true, IsForeignKey=false)]
		public AccountHistory PayerAccountRecord
		{
			get
			{
				return this._PayerAccountRecord.Entity;
			}
			set
			{
				AccountHistory previousValue = this._PayerAccountRecord.Entity;
				if (((previousValue != value) 
							|| (this._PayerAccountRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayerAccountRecord.Entity = null;
						previousValue.RecieverAccountRecord = null;
					}
					this._PayerAccountRecord.Entity = value;
					if ((value != null))
					{
						value.RecieverAccountRecord = this;
					}
					this.SendPropertyChanged("PayerAccountRecord");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_AccountHistory", Storage="_ActionUser", ThisKey="ManagerId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User ActionUser
		{
			get
			{
				return this._ActionUser.Entity;
			}
			set
			{
				aspnet_User previousValue = this._ActionUser.Entity;
				if (((previousValue != value) 
							|| (this._ActionUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionUser.Entity = null;
						previousValue.AccountHistories.Remove(this);
					}
					this._ActionUser.Entity = value;
					if ((value != null))
					{
						value.AccountHistories.Add(this);
						this._ManagerId = value.UserId;
					}
					else
					{
						this._ManagerId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ActionUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AccountHistory", Storage="_ActionOperationalClient", ThisKey="OperationalClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ActionOperationalClient
		{
			get
			{
				return this._ActionOperationalClient.Entity;
			}
			set
			{
				Client previousValue = this._ActionOperationalClient.Entity;
				if (((previousValue != value) 
							|| (this._ActionOperationalClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionOperationalClient.Entity = null;
						previousValue.AccountHistoriesAsOperational.Remove(this);
					}
					this._ActionOperationalClient.Entity = value;
					if ((value != null))
					{
						value.AccountHistoriesAsOperational.Add(this);
						this._OperationalClientId = value.Id;
					}
					else
					{
						this._OperationalClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActionOperationalClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AccountHistory1", Storage="_ActionRealClient", ThisKey="RealClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ActionRealClient
		{
			get
			{
				return this._ActionRealClient.Entity;
			}
			set
			{
				Client previousValue = this._ActionRealClient.Entity;
				if (((previousValue != value) 
							|| (this._ActionRealClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionRealClient.Entity = null;
						previousValue.AccountHistoriesAsReal.Remove(this);
					}
					this._ActionRealClient.Entity = value;
					if ((value != null))
					{
						value.AccountHistoriesAsReal.Add(this);
						this._RealClientId = value.Id;
					}
					else
					{
						this._RealClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActionRealClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountHistory", Storage="_Account", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountHistories.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountHistories.Add(this);
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostRangesHistory_AccountHistory", Storage="_CostRangesHistory", ThisKey="CostRangeId", OtherKey="VersionId", IsForeignKey=true)]
		public CostRangesHistory CostRangesHistory
		{
			get
			{
				return this._CostRangesHistory.Entity;
			}
			set
			{
				CostRangesHistory previousValue = this._CostRangesHistory.Entity;
				if (((previousValue != value) 
							|| (this._CostRangesHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostRangesHistory.Entity = null;
						previousValue.AccountHistories.Remove(this);
					}
					this._CostRangesHistory.Entity = value;
					if ((value != null))
					{
						value.AccountHistories.Add(this);
						this._CostRangeId = value.VersionId;
					}
					else
					{
						this._CostRangeId = default(Nullable<long>);
					}
					this.SendPropertyChanged("CostRangesHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountHistory_AccountHistory", Storage="_RecieverAccountRecord", ThisKey="TargetAccountId", OtherKey="VersionId", IsForeignKey=true)]
		public AccountHistory RecieverAccountRecord
		{
			get
			{
				return this._RecieverAccountRecord.Entity;
			}
			set
			{
				AccountHistory previousValue = this._RecieverAccountRecord.Entity;
				if (((previousValue != value) 
							|| (this._RecieverAccountRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecieverAccountRecord.Entity = null;
						previousValue.PayerAccountRecord = null;
					}
					this._RecieverAccountRecord.Entity = value;
					if ((value != null))
					{
						value.PayerAccountRecord = this;
						this._TargetAccountId = value.VersionId;
					}
					else
					{
						this._TargetAccountId = default(Nullable<long>);
					}
					this.SendPropertyChanged("RecieverAccountRecord");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Distribution_AccountHistory", Storage="_Distribution", ThisKey="DistributionId", OtherKey="Id", IsForeignKey=true)]
		public Distribution Distribution
		{
			get
			{
				return this._Distribution.Entity;
			}
			set
			{
				Distribution previousValue = this._Distribution.Entity;
				if (((previousValue != value) 
							|| (this._Distribution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Distribution.Entity = null;
						previousValue.DebtingHistory.Remove(this);
					}
					this._Distribution.Entity = value;
					if ((value != null))
					{
						value.DebtingHistory.Add(this);
						this._DistributionId = value.Id;
					}
					else
					{
						this._DistributionId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Distribution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Guid _UserId;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _MobilePhone;
		
		private global::Csharper.OliverTwist.Model.Sex? _Sex;
		
		private string _TimeZone;
		
		private string _City;
		
		private bool _IsDeleted;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnSexChanging(global::Csharper.OliverTwist.Model.Sex? value);
    partial void OnSexChanged();
    partial void OnTimeZoneChanging(string value);
    partial void OnTimeZoneChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserProfile()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(4000) NOT NULL")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(4000)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(4000) NOT NULL")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="NVarChar(4000) NOT NULL")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Int", CanBeNull=true)]
		public global::Csharper.OliverTwist.Model.Sex? Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZone", DbType="NVarChar(4000)")]
		public string TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(4000)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserProfile", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Profile = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Profile = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_UsersInRoles")]
	public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_User> _User;
		
		private EntityRef<aspnet_Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public aspnet_UsersInRole()
		{
			this._User = default(EntityRef<aspnet_User>);
			this._Role = default(EntityRef<aspnet_Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RoleAssigments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RoleAssigments.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserAssigments.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserAssigments.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Roles")]
	public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<aspnet_UsersInRole> _UserAssigments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Role()
		{
			this._UserAssigments = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_UserAssigments), new Action<aspnet_UsersInRole>(this.detach_UserAssigments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredRoleName
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_UserAssigments", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<aspnet_UsersInRole> UserAssigments
		{
			get
			{
				return this._UserAssigments;
			}
			set
			{
				this._UserAssigments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserAssigments(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserAssigments(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientsHistory")]
	public partial class ClientsHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VersionId;
		
		private long _Id;
		
		private string _OrganizationName;
		
		private global::Csharper.OliverTwist.Model.ClientStatus? _Status;
		
		private System.Nullable<long> _DeallerOfClientId;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Int64? _CreatedByClientId;
		
		private System.Nullable<long> _AccountId;
		
		private bool _IsDeleted;
		
		private global::Csharper.OliverTwist.Model.HistoryAction? _Action;
		
		private System.Nullable<System.Guid> _ManagerId;
		
		private System.Nullable<long> _RealClientId;
		
		private System.Nullable<long> _OperationalClientId;
		
		private System.DateTime _VersionDate;
		
		private EntityRef<aspnet_User> _ActionManager;
		
		private EntityRef<Client> _ActionOperationalClient;
		
		private EntityRef<Client> _ActionRealClient;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionIdChanging(long value);
    partial void OnVersionIdChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOrganizationNameChanging(string value);
    partial void OnOrganizationNameChanged();
    partial void OnStatusChanging(global::Csharper.OliverTwist.Model.ClientStatus? value);
    partial void OnStatusChanged();
    partial void OnDeallerOfClientIdChanging(System.Nullable<long> value);
    partial void OnDeallerOfClientIdChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByClientIdChanging(System.Int64? value);
    partial void OnCreatedByClientIdChanged();
    partial void OnAccountIdChanging(System.Nullable<long> value);
    partial void OnAccountIdChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnActionChanging(global::Csharper.OliverTwist.Model.HistoryAction? value);
    partial void OnActionChanged();
    partial void OnManagerIdChanging(System.Nullable<System.Guid> value);
    partial void OnManagerIdChanged();
    partial void OnRealClientIdChanging(System.Nullable<long> value);
    partial void OnRealClientIdChanged();
    partial void OnOperationalClientIdChanging(System.Nullable<long> value);
    partial void OnOperationalClientIdChanged();
    partial void OnVersionDateChanging(System.DateTime value);
    partial void OnVersionDateChanged();
    #endregion
		
		public ClientsHistory()
		{
			this._ActionManager = default(EntityRef<aspnet_User>);
			this._ActionOperationalClient = default(EntityRef<Client>);
			this._ActionRealClient = default(EntityRef<Client>);
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VersionId
		{
			get
			{
				return this._VersionId;
			}
			set
			{
				if ((this._VersionId != value))
				{
					this.OnVersionIdChanging(value);
					this.SendPropertyChanging();
					this._VersionId = value;
					this.SendPropertyChanged("VersionId");
					this.OnVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationName", DbType="NVarChar(4000)")]
		public string OrganizationName
		{
			get
			{
				return this._OrganizationName;
			}
			set
			{
				if ((this._OrganizationName != value))
				{
					this.OnOrganizationNameChanging(value);
					this.SendPropertyChanging();
					this._OrganizationName = value;
					this.SendPropertyChanged("OrganizationName");
					this.OnOrganizationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int", CanBeNull=true)]
		public global::Csharper.OliverTwist.Model.ClientStatus? Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeallerOfClientId", DbType="BigInt")]
		public System.Nullable<long> DeallerOfClientId
		{
			get
			{
				return this._DeallerOfClientId;
			}
			set
			{
				if ((this._DeallerOfClientId != value))
				{
					this.OnDeallerOfClientIdChanging(value);
					this.SendPropertyChanging();
					this._DeallerOfClientId = value;
					this.SendPropertyChanged("DeallerOfClientId");
					this.OnDeallerOfClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByClientId", DbType="BigInt", CanBeNull=true)]
		public System.Int64? CreatedByClientId
		{
			get
			{
				return this._CreatedByClientId;
			}
			set
			{
				if ((this._CreatedByClientId != value))
				{
					this.OnCreatedByClientIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByClientId = value;
					this.SendPropertyChanged("CreatedByClientId");
					this.OnCreatedByClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt")]
		public System.Nullable<long> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Int", CanBeNull=true)]
		public global::Csharper.OliverTwist.Model.HistoryAction? Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ManagerId
		{
			get
			{
				return this._ManagerId;
			}
			set
			{
				if ((this._ManagerId != value))
				{
					if (this._ActionManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIdChanging(value);
					this.SendPropertyChanging();
					this._ManagerId = value;
					this.SendPropertyChanged("ManagerId");
					this.OnManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealClientId", DbType="BigInt")]
		public System.Nullable<long> RealClientId
		{
			get
			{
				return this._RealClientId;
			}
			set
			{
				if ((this._RealClientId != value))
				{
					if (this._ActionRealClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealClientIdChanging(value);
					this.SendPropertyChanging();
					this._RealClientId = value;
					this.SendPropertyChanged("RealClientId");
					this.OnRealClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationalClientId", DbType="BigInt")]
		public System.Nullable<long> OperationalClientId
		{
			get
			{
				return this._OperationalClientId;
			}
			set
			{
				if ((this._OperationalClientId != value))
				{
					if (this._ActionOperationalClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationalClientIdChanging(value);
					this.SendPropertyChanging();
					this._OperationalClientId = value;
					this.SendPropertyChanged("OperationalClientId");
					this.OnOperationalClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionDate", DbType="DateTime NOT NULL")]
		public System.DateTime VersionDate
		{
			get
			{
				return this._VersionDate;
			}
			set
			{
				if ((this._VersionDate != value))
				{
					this.OnVersionDateChanging(value);
					this.SendPropertyChanging();
					this._VersionDate = value;
					this.SendPropertyChanged("VersionDate");
					this.OnVersionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_ClientsHistory", Storage="_ActionManager", ThisKey="ManagerId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User ActionManager
		{
			get
			{
				return this._ActionManager.Entity;
			}
			set
			{
				aspnet_User previousValue = this._ActionManager.Entity;
				if (((previousValue != value) 
							|| (this._ActionManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionManager.Entity = null;
						previousValue.ClientsHistoryAsManager.Remove(this);
					}
					this._ActionManager.Entity = value;
					if ((value != null))
					{
						value.ClientsHistoryAsManager.Add(this);
						this._ManagerId = value.UserId;
					}
					else
					{
						this._ManagerId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ActionManager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientsHistory", Storage="_ActionOperationalClient", ThisKey="OperationalClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ActionOperationalClient
		{
			get
			{
				return this._ActionOperationalClient.Entity;
			}
			set
			{
				Client previousValue = this._ActionOperationalClient.Entity;
				if (((previousValue != value) 
							|| (this._ActionOperationalClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionOperationalClient.Entity = null;
						previousValue.ClientsHistoryAsOperational.Remove(this);
					}
					this._ActionOperationalClient.Entity = value;
					if ((value != null))
					{
						value.ClientsHistoryAsOperational.Add(this);
						this._OperationalClientId = value.Id;
					}
					else
					{
						this._OperationalClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActionOperationalClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientsHistory1", Storage="_ActionRealClient", ThisKey="RealClientId", OtherKey="Id", IsForeignKey=true)]
		public Client ActionRealClient
		{
			get
			{
				return this._ActionRealClient.Entity;
			}
			set
			{
				Client previousValue = this._ActionRealClient.Entity;
				if (((previousValue != value) 
							|| (this._ActionRealClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActionRealClient.Entity = null;
						previousValue.ClientsHistoryAsReal.Remove(this);
					}
					this._ActionRealClient.Entity = value;
					if ((value != null))
					{
						value.ClientsHistoryAsReal.Add(this);
						this._RealClientId = value.Id;
					}
					else
					{
						this._RealClientId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActionRealClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientsHistory2", Storage="_Client", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.ClientsHistory.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.ClientsHistory.Add(this);
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(long);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTemplates")]
	public partial class AccountTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private long _AccountId;
		
		private long _ClientOwnerId;
		
		private EntityRef<Client> _OwnerClient;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnClientOwnerIdChanging(long value);
    partial void OnClientOwnerIdChanged();
    #endregion
		
		public AccountTemplate()
		{
			this._OwnerClient = default(EntityRef<Client>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientOwnerId", DbType="BigInt NOT NULL")]
		public long ClientOwnerId
		{
			get
			{
				return this._ClientOwnerId;
			}
			set
			{
				if ((this._ClientOwnerId != value))
				{
					if (this._OwnerClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._ClientOwnerId = value;
					this.SendPropertyChanged("ClientOwnerId");
					this.OnClientOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AccountTemplate", Storage="_OwnerClient", ThisKey="ClientOwnerId", OtherKey="Id", IsForeignKey=true)]
		public Client OwnerClient
		{
			get
			{
				return this._OwnerClient.Entity;
			}
			set
			{
				Client previousValue = this._OwnerClient.Entity;
				if (((previousValue != value) 
							|| (this._OwnerClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerClient.Entity = null;
						previousValue.AccountTemplates.Remove(this);
					}
					this._OwnerClient.Entity = value;
					if ((value != null))
					{
						value.AccountTemplates.Add(this);
						this._ClientOwnerId = value.Id;
					}
					else
					{
						this._ClientOwnerId = default(long);
					}
					this.SendPropertyChanged("OwnerClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountTemplate", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Template = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Template = this;
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountLocks")]
	public partial class AccountLock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _AccountId;
		
		private System.Nullable<long> _DistributionId;
		
		private long _Amount;
		
		private bool _IsDeleted;
		
		private bool _IsFinal;
		
		private string _ExtDistributionId;
		
		private System.DateTime _LockDate;
		
		private System.Nullable<System.DateTime> _DeleteTime;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Distribution> _Distribution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(System.Nullable<long> value);
    partial void OnAccountIdChanged();
    partial void OnDistributionIdChanging(System.Nullable<long> value);
    partial void OnDistributionIdChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsFinalChanging(bool value);
    partial void OnIsFinalChanged();
    partial void OnExtDistributionIdChanging(string value);
    partial void OnExtDistributionIdChanged();
    partial void OnLockDateChanging(System.DateTime value);
    partial void OnLockDateChanged();
    partial void OnDeleteTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDeleteTimeChanged();
    #endregion
		
		public AccountLock()
		{
			this._Account = default(EntityRef<Account>);
			this._Distribution = default(EntityRef<Distribution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt")]
		public System.Nullable<long> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistributionId", DbType="BigInt")]
		public System.Nullable<long> DistributionId
		{
			get
			{
				return this._DistributionId;
			}
			set
			{
				if ((this._DistributionId != value))
				{
					if (this._Distribution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistributionIdChanging(value);
					this.SendPropertyChanging();
					this._DistributionId = value;
					this.SendPropertyChanged("DistributionId");
					this.OnDistributionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="BigInt NOT NULL")]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFinal", DbType="Bit NOT NULL")]
		public bool IsFinal
		{
			get
			{
				return this._IsFinal;
			}
			set
			{
				if ((this._IsFinal != value))
				{
					this.OnIsFinalChanging(value);
					this.SendPropertyChanging();
					this._IsFinal = value;
					this.SendPropertyChanged("IsFinal");
					this.OnIsFinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtDistributionId", DbType="NVarChar(300)")]
		public string ExtDistributionId
		{
			get
			{
				return this._ExtDistributionId;
			}
			set
			{
				if ((this._ExtDistributionId != value))
				{
					this.OnExtDistributionIdChanging(value);
					this.SendPropertyChanging();
					this._ExtDistributionId = value;
					this.SendPropertyChanged("ExtDistributionId");
					this.OnExtDistributionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockDate", DbType="DateTime NOT NULL")]
		public System.DateTime LockDate
		{
			get
			{
				return this._LockDate;
			}
			set
			{
				if ((this._LockDate != value))
				{
					this.OnLockDateChanging(value);
					this.SendPropertyChanging();
					this._LockDate = value;
					this.SendPropertyChanged("LockDate");
					this.OnLockDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeleteTime
		{
			get
			{
				return this._DeleteTime;
			}
			set
			{
				if ((this._DeleteTime != value))
				{
					this.OnDeleteTimeChanging(value);
					this.SendPropertyChanging();
					this._DeleteTime = value;
					this.SendPropertyChanged("DeleteTime");
					this.OnDeleteTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountLock", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountLocks.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountLocks.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Distribution_AccountLock", Storage="_Distribution", ThisKey="DistributionId", OtherKey="Id", IsForeignKey=true)]
		public Distribution Distribution
		{
			get
			{
				return this._Distribution.Entity;
			}
			set
			{
				Distribution previousValue = this._Distribution.Entity;
				if (((previousValue != value) 
							|| (this._Distribution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Distribution.Entity = null;
						previousValue.AccountLocks.Remove(this);
					}
					this._Distribution.Entity = value;
					if ((value != null))
					{
						value.AccountLocks.Add(this);
						this._DistributionId = value.Id;
					}
					else
					{
						this._DistributionId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Distribution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetUnderControlClientsResult
	{
		
		private System.Nullable<long> _id;
		
		private System.Nullable<long> _CreatedByClientId;
		
		private string _OrganizationName;
		
		private System.Nullable<int> _ChildLevel;
		
		public GetUnderControlClientsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByClientId", DbType="BigInt")]
		public System.Nullable<long> CreatedByClientId
		{
			get
			{
				return this._CreatedByClientId;
			}
			set
			{
				if ((this._CreatedByClientId != value))
				{
					this._CreatedByClientId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationName", DbType="NVarChar(4000)")]
		public string OrganizationName
		{
			get
			{
				return this._OrganizationName;
			}
			set
			{
				if ((this._OrganizationName != value))
				{
					this._OrganizationName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildLevel", DbType="Int")]
		public System.Nullable<int> ChildLevel
		{
			get
			{
				return this._ChildLevel;
			}
			set
			{
				if ((this._ChildLevel != value))
				{
					this._ChildLevel = value;
				}
			}
		}
	}
	
	public partial class LockSMSResult
	{
		
		private long _Id;
		
		private System.Nullable<long> _AccountId;
		
		private long _Amount;
		
		public LockSMSResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt")]
		public System.Nullable<long> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this._AccountId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="BigInt NOT NULL")]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
